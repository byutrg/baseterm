{#/*
 *  This file is part of BaseTerm.
 *  
 *  BaseTerm is an open-source and free to use terminology management system built with the primary goal of natively supporting the most popular TBX dialect for exchange, TBX-Basic
 *  
 *  Copyright Â© (2015-2017) BYU TRG & LTAC Global & CRITI
 *  
 *  See the LICENSE file that accompanied this source code for the full license
 *  information
 */#}
<script type='text/javascript'>
//******************************Modal JS*****************************
	var previousText;

	var input;

	//mini-window event handlers
	
	$('body').on('mouseover', '.editText, .editList, .editReference, .editExtRef, .editImgRef', function(){
		if(typeof clickToEditTip.destroy != 'undefined') clickToEditTip.destroy();
		clickToEditTip = new jBox('Mouse', {
			attach: '.editText, .editList,  .editReference, .editExtRef, .editImgRef',
			content: 'Click to edit this value!',
			class: 'clickToEditTip',
			closeOnClick: true
		}).open();
	});
	$('body').on('mouseover', '.addNote', function(){
		if(typeof clickToAddNoteTip.destroy != 'undefined') clickToAddNoteTip.destroy();
		clickToAddNoteTip = new jBox('Mouse', {
			attach: '.addNote',
			content: 'Add a new note!',
			class: 'clickToAddNoteTip'
		}).open();
	});
	$('body').on('mouseover','.refContent', function(){
		if ($(this).text() != 'Click here to add a reference.')
		{
			var index = $(this).attr('id').split('_')[1];
			var level = $(this).attr('id').split('_')[3];
			var target = '';
			
			if (typeof displayRefTargetTip.destroy != 'undefined') displayRefTargetTip.destroy();
			
			switch(level.toUpperCase())
			{
				case 'TERMENTRY':
					target = entries[e].references[index].target;
					break;
				case 'LANGSET':
					target = entries[e].languages[l].references[index].target;
					break;
				case 'TIG':
					target = entries[e].languages[l].terms[t].references[index].target;
					break;
			}
			
			displayRefTargetTip = new jBox('Mouse', {
				attach: '.refContent',
				content: "Target Id: "+target+" -- Click to Edit",
				class: 'displayRefTargetTip'
			}).open();
		}
	});
	$('body').on('mouseover','.extRefContent', function(){
		if ($(this).text() != 'Click here to add a reference.')
		{
			var index = $(this).attr('id').split('_')[1];
			var level = $(this).attr('id').split('_')[3];
			var target = '';
			
			if (typeof displayExtRefTargetTip.destroy != 'undefined') displayExtRefTargetTip.destroy();
			
			switch(level.toUpperCase())
			{
				case 'TERMENTRY':
					target = entries[e].external_references[index].target;
					break;
				case 'LANGSET':
					target = entries[e].languages[l].external_references[index].target;
					break;
				case 'TIG':
					target = entries[e].languages[l].terms[t].external_references[index].target;
					break;
			}
			
			displayExtRefTargetTip = new jBox('Mouse', {
				attach: '.extRefContent',
				content: "Target Id: "+target+" -- Click to Edit",
				class: 'displayRefTargetTip'
			}).open();
		}
	});
	$('body').on('mouseover','.imgContent', function(){
		if ($(this).text() != 'Click here to add a reference.')
		{
			var index = $(this).attr('id').split('_')[1];
			var level = $(this).attr('id').split('_')[3];
			var target = '';
			
			if (typeof displayImgTargetTip.destroy != 'undefined') displayImgTargetTip.destroy();
			
			switch(level.toUpperCase())
			{
				case 'TERMENTRY':
					target = entries[e].external_references[index].target;
					break;
			}
			
			displayImgTargetTip = new jBox('Mouse', {
				attach: '.imgContent',
				content: "Target Id: "+target+" -- Click to Edit",
				class: 'displayRefTargetTip'
			}).open();
		}
	});
	$('body').on('mouseover','.editGeo', function(){
		if ($(this).text() != 'Click here to add a reference.')
		{
			var index = $(this).attr('id').split('_')[1];
			var level = $(this).attr('id').split('_')[3];
			var target = '';
			
			if (typeof geoEditTip.destroy != 'undefined') geoEditTip.destroy();
			
			geoEditTip = new jBox('Mouse', {
				attach: '.editGeo',
				content: "Click to edit this value!",
				class: 'displayRefTargetTip'
			}).open();
		}
	});
	
	
	//TEXT BOXES
	$('body').on('click', '.editText', function(){
		
		input = $('<input class="inputTextValue" type="text" />');
		input.attr('id', $(this).attr('id'));
		var currentText;
		
		var type = input.attr('id').split('_')[0];
		switch(type)
		{
			case 'subjectValue':

				if (showTips)
				{
					//warn that Notes are kept at Entry level
					new jBox('Notice', {
						color: 'red',
						content: '<p>Subject fields apply to the entire entry. Changing the subject field will apply to all terms of an entry.</p>',
						position: {
							x: 'left',
							y: 'center'
						},
						offset: {
							x: 20
						}
					});
				}

				if ($(this).text() != "---")
				{
					currentText = $(this).text();
				}
				else
				{
					currentText = "";
				}
				break;
			case 'noteValue':

				if (showTips)
				{
					//warn that Notes are kept at Entry level
					new jBox('Notice', {
						color: 'red',
						content: '<p>Notes are currently kept at the entry level.  Any notes added will apply to all terms of an entry.</p>'+
								'<p>Leave an entry blank to delete it.</p>',
						position: {
							x: 'left',
							y: 'center'
						},
						offset: {
							x: 20
						}
					});
				}
			
				if ($(this).text() != "Click here to add a note." && $(this).text() != "---")
				{
					currentText = $(this).text();
				}
				else
				{
					currentText = "";
				}
				break;
			case 'projectValue':
				if ($(this).text() != "Click here to add a project." && $(this).text() != "---")
				{
					currentText = $(this).text();
				}
				else
				{
					currentText = "";
				}
				break;
			default:
				if (
					$(this).text() != "---" &&
					$(this).text() != "Click here to add content." &&
					$(this).text() != "Click here to add a source."
					)
				{
					currentText = $(this).text();
				}
				else
				{
					currentText = "";
				}
				break;
		}
		previousText = currentText;
		$(this).replaceWith( input );
		input.attr('value', currentText);
		input.focus();
	});
	$('body').on('focusout', '.inputTextValue', function(){
			
			var input = $('<span class="editText"></span>');
			input.attr('id', $(this).attr('id'));

			var currentText =($(this).val() != "") ?  $(this).val() : "---";
			$(this).replaceWith( input );
			
			
			if (currentText != previousText)
			{
				setChanged(true);
			
				navObject = getNavObject()
				e = navObject.e;
				l = navObject.l;
				t = navObject.t;
			
				//update entries
				var type = input.attr('id').split('_')[0];
				
				switch (type)
				{
			//TERMS
					case 'termValue':
						entries[e].languages[l].terms[t].term = currentText;
						setLevel('edit','tig');
						break;
			//SOURCE
					case 'termSourceValue':
						entries[e].languages[l].terms[t]['source'] = currentText;
						setLevel('edit', 'tig');
						break;
			//NOTES
					case 'noteValue':
						input.attr('class', 'editText arrayFormat');
						var noteIndex;
						(typeof input.attr('id').split('_')[1] != 'undefined') ? noteIndex = input.attr('id').split('_')[1] : noteIndex = 'new';
						if (currentText == "---")
						{
							if (noteIndex != 'new') 
							{
								entries[e].notes.splice(noteIndex, 1);
							}
						}
						else
						{
							if (noteIndex == 'new')
							{
								if (typeof entries[e].notes != "undefined")
								{
									entries[e].notes.push(currentText);
								}
								else
								{
									entries[e].notes = [currentText];
								}
							}
							else
							{
								entries[e].notes[noteIndex] = currentText;
							}
						}
						setLevel('edit', 'entry');
						break;
			//PROJECTS
					case 'projectValue':
						input.attr('class', 'editText arrayFormat');
						var projectIndex;
						(typeof input.attr('id').split('_')[1] != 'undefined') ? projectIndex = input.attr('id').split('_')[1] : projectIndex = 'new';
						if (currentText == "---")
						{
							if (projectIndex != 'new') 
							{
								entries[e].languages[l].terms[t].projects.splice(projectIndex, 1);
							}
						}
						else
						{
							if (projectIndex == 'new')
							{
								if (typeof entries[e].languages[l].terms[t].projects != "undefined")
								{
									entries[e].languages[l].terms[t].projects.push(currentText);
								}
								else
								{
									entries[e].languages[l].terms[t].projects = [currentText];
								}
							}
							else
							{
								entries[e].languages[l].terms[t].projects[projectIndex] = currentText;
							}
						}
						setLevel('edit', 'tig');
						break;
			//DEFINITIONS
					case 'defValue':
						input.attr('class', 'editText arrayFormat');
						var projectIndex;
						(typeof input.attr('id').split('_')[1] != 'undefined') ? projectIndex = input.attr('id').split('_')[1] : projectIndex = 'new';
						if ($(this).attr('id').split('_')[2] == 'content')
						{
							if ($(this).attr('id').split('_')[3] == 'langset')
							{
								if (currentText != '---')
								{
									var sourceVal = ($('#defValue_'+projectIndex+'_source').text() != '---' && $('#defValue_'+projectIndex+'_source').text() != 'Click here to add a source.') ? $('#defValue_'+projectIndex+'_source').text() : '';
									
									var defObj = {'content': currentText};
									if (sourceVal != '') defObj['source'] = sourceVal;
									
									if (typeof entries[e].languages[l].definitions != 'undefined')
									{
										if (projectIndex == 'new')
										{
											projectIndex = entries[e].languages[l].definitions.length;
											entries[e].languages[l].definitions.push(defObj);
											input.attr('id', 'defValue_'+projectIndex+'_content');
											$('#defValue_new_source').attr('id', 'defValue_'+projectIndex+'_source');
										}
										else
										{
											entries[e].languages[l].definitions[projectIndex].content = currentText;
											entries[e].languages[l].definitions[projectIndex].source = sourceVal;
										}
									}
									else
									{
										entries[e].languages[l]['definitions'] = [defObj];
										input.attr('id', 'defValue_0_content');
										$('#defValue_new_source').attr('id', 'defValue_0_source');
									}
								}
								else
								{
									if (entries[e].languages[l].definitions != 'undefined')
									{
										if (projectIndex != 'new')
										{
											entries[e].languages[l].definitions.splice(projectIndex, 1);
										}
									}
								}
								setLevel('edit', 'lang');
							}
							else
							{
								if (currentText != '---')
								{
									var sourceVal = ($('#defValue_'+projectIndex+'_source').text() != '---' && $('#defValue_'+projectIndex+'_source').text() != 'Click here to add a source.') ? $('#defValue_'+projectIndex+'_source').text() : '';
									
									var defObj = {'content': currentText};
									if (sourceVal != '') defObj['source'] = sourceVal;
									
									if (typeof entries[e].definitions != 'undefined')
									{
										if (projectIndex == 'new')
										{
											projectIndex = entries[e].definitions.length;
											entries[e].definitions.push(defObj);
											input.attr('id', 'defValue_'+projectIndex+'_content');
											$('#defValue_new_source').attr('id', 'defValue_'+projectIndex+'_source');
										}
										else
										{
											entries[e].definitions[projectIndex].content = currentText;
											entries[e].definitions[projectIndex].source = sourceVal;
										}
									}
									else
									{
										entries[e]['definitions'] = [defObj];
										input.attr('id', 'defValue_0_content');
										$('#defValue_new_source').attr('id', 'defValue_0_source');
									}
								}
								else
								{
									if (entries[e].definitions != 'undefined')
									{
										if (projectIndex != 'new')
										{
											entries[e].definitions.splice(projectIndex, 1);
										}
									}
								}
								setLevel('edit', 'entry');
							}
						}
						else if ($(this).attr('id').split('_')[2] == 'source')
						{
							if ($(this).attr('id').split('_')[3] == 'langset')
							{
								if (currentText != '---')
								{
									if (typeof entries[e].languages[l].definitions != 'undefined')
									{
										if (projectIndex == 'new')
										{
											if($('#defValue_new_source').text() == '---' || $('#defValue_new_source').text() == 'Click here to add content.')
											{
												new jBox('Notice', {
													content: 'Definition will not be saved without content',
													position: {
														x: 'left',
														y: 'center',
													},
													offset: {
														x: 5
													}
												});
											}
										}
										else
										{
											if (typeof entries[e].languages[l].definitions[projectIndex] != 'undefined')
											{
												entries[e].languages[l].definitions[projectIndex].source = currentText;
											}
										}
									}
									else
									{
										new jBox('Notice', {
													content: 'Definition will not be saved without content',
													position: {
														x: 'left',
														y: 'center',
													},
													offset: {
														x: 5
													}
												});
									}
								}
								else
								{
									if (entries[e].languages[l].definitions != 'undefined')
									{
										if (projectIndex != 'new')
										{
											delete entries[e].languages[l].definitions[projectIndex].source;
										}
									}
								}
								setLevel('edit', 'lang');
							}
							else
							{
								if (currentText != '---')
								{
									
									if (typeof entries[e].definitions != 'undefined')
									{
										if (projectIndex == 'new')
										{
											if($('#defValue_new_source').text() == '---' || $('#defValue_new_source').text() == 'Click here to add content.')
											{
												new jBox('Notice', {
													content: 'Definition will not be saved without content',
													position: {
														x: 'left',
														y: 'center',
													},
													offset: {
														x: 5
													}
												});
											}
										}
										else
										{
											if (typeof entries[e].definitions[projectIndex] != 'undefined')
											{
												entries[e].definitions[projectIndex].source = currentText;
											}
										}
									}
									else
									{
										new jBox('Notice', {
													content: 'Definition will not be saved without content',
													position: {
														x: 'left',
														y: 'center',
													},
													offset: {
														x: 5
													}
												});
									}
								}
								else
								{
									if (entries[e].definitions != 'undefined')
									{
										if (projectIndex != 'new')
										{
											delete entries[e].definitions[projectIndex].source;
										}
									}
								}
								setLevel('edit', 'entry');
							}	
						}
						break;
			//CONTEXTS
					case 'ctxtValue':
						input.attr('class', 'editText arrayFormat');
						var projectIndex;
						(typeof input.attr('id').split('_')[1] != 'undefined') ? projectIndex = input.attr('id').split('_')[1] : projectIndex = 'new';
						if ($(this).attr('id').split('_')[2] == 'content')
						{
							if (currentText != '---')
							{
								var sourceVal = ($('#ctxtValue_'+projectIndex+'_source').text() != '---' && $('#ctxtValue_'+projectIndex+'_source').text() != 'Click here to add a source.') ? $('#ctxtValue_'+projectIndex+'_source').text() : '';
								
								var ctxtObj = {'content': currentText};
								if (sourceVal != '') ctxtObj['source'] = sourceVal;
								
								if (typeof entries[e].languages[l].terms[t].contexts != 'undefined')
								{
									if (projectIndex == 'new')
									{
										projectIndex = entries[e].languages[l].terms[t].contexts.length;
										entries[e].languages[l].terms[t].contexts.push(ctxtObj);
										input.attr('id', 'ctxtValue_'+projectIndex+'_content');
										$('#ctxtValue_new_source').attr('id', 'ctxtValue_'+projectIndex+'_source');
									}
									else
									{
										entries[e].languages[l].terms[t].contexts[projectIndex].content = currentText;
										entries[e].languages[l].terms[t].contexts[projectIndex].source = sourceVal;
									}
								}
								else
								{
									entries[e].languages[l].terms[t]['contexts'] = [ctxtObj];
									input.attr('id', 'ctxtValue_0_content');
									$('#ctxtValue_new_source').attr('id', 'ctxtValue_0_source');
								}
							}
							else
							{
								if (entries[e].languages[l].terms[t].contexts != 'undefined')
								{
									if (projectIndex != 'new')
									{
										entries[e].languages[l].terms[t].contexts.splice(projectIndex, 1);
									}
								}
							}
						}
						else if ($(this).attr('id').split('_')[2] == 'source')
						{
							if (currentText != '---')
							{
								
								if (typeof entries[e].languages[l].terms[t].contexts != 'undefined')
								{
									if (projectIndex == 'new')
									{
										if($('#ctxtValue_new_source').text() == '---' || $('#ctxtValue_new_source').text() == 'Click here to add content.')
										{
											new jBox('Notice', {
												content: 'Context will not be saved without content',
												position: {
													x: 'left',
													y: 'center',
												},
												offset: {
													x: 5
												}
											});
										}
									}
									else
									{
										if (typeof entries[e].languages[l].terms[t].contexts[projectIndex] != 'undefined')
										{
											entries[e].languages[l].terms[t].contexts[projectIndex].source = currentText;
										}
									}
								}
								else
								{
									new jBox('Notice', {
												content: 'Context will not be saved without content',
												position: {
													x: 'left',
													y: 'center',
												},
												offset: {
													x: 5
												}
											});
								}
							}
							else
							{
								if (entries[e].languages[l].terms[t].contexts != 'undefined')
								{
									if (projectIndex != 'new')
									{
										delete entries[e].languages[l].terms[t].contexts[projectIndex].source;
									}
								}
							}
						}
						setLevel('edit', 'tig');
					break;
				}
			}
			input.text(currentText);
			
		});
	
	//SELECTION MENUS
	   //General
	$('body').on('click', '.editList', function(){
		entriesBackup = entries;
		input = $('<select class="inputListValue"></select>');
		input.attr('id',$(this).attr('id'));
		var type = $(this).attr('id').split('_')[0];
		previousText = $(this).text();
		switch(type)
		{
			case 'statusValue':
				var optPref = $('<option value="preferredTerm-admn-sts">Preferred</option>');
				var optAdm = $("<option value='admittedTerm-admn-sts'>Admitted</option>");
				var optDep = $("<option value='deprecatedTerm-admn-sts'>Deprecated</option>");
				var optSup = $("<option value='supersededTerm-admn-sts'>Superseded</option>");
				
				switch($(this).text())
				{
					case 'Preferred':
						optPref.attr('selected', 'true');
						break;
					case 'Admitted':
						optAdm.attr('selected','true');
						break;
					case 'Deprecated':
						optDep.attr('selected','true');
						break;
					case 'Superseded':
						optSup.attr('selected','true');
						break;
				}
				input.append(optPref);
				input.append(optAdm);
				input.append(optDep);
				input.append(optSup);
				
				$(this).replaceWith(input);
				break;
			case 'posValue':
				var optNoun = $("<option value='noun'>Noun</option>");
				var optVerb = $("<option value='verb'>Verb</option>");
				var optAdj = $("<option value='adjective'>Adjective</option>");
				var optAdv = $("<option value='adverb'>Adverb</option>");
				var optPropN = $("<option value='properNoun'>Proper Noun</option>");
				var optOther = $("<option value='other'>Other</option>");
				var optUnspecified = $("<option value='unspecified'>Unspecified</option>");
				
				switch($(this).text())
				{
					case 'Noun':
						optNoun.attr('selected', 'true');
						break;
					case 'Verb':
						optVerb.attr('selected','true');
						break;
					case 'Adjective':
						optAdj.attr('selected','true');
						break;
					case 'Adverb':
						optAdv.attr('selected','true');
						break;
					case 'Proper Noun':
						optPropN.attr('selected','true');
						break;
					case 'Other':
						optOther.attr('selected','true');
						break;
					case 'Unspecified':
						optUnspecified.attr('selected','true');
				}
				input.append(optNoun);
				input.append(optVerb);
				input.append(optAdj);
				input.append(optAdv);
				input.append(optPropN);
				input.append(optOther);
				input.append(optUnspecified);
				
				$(this).replaceWith(input);
				break;
			case 'genderValue':
				var optMasc = $("<option value='masculine'>Masculine</option>");
				var optFem = $("<option value='feminine'>Feminine</option>");
				var optNeut = $("<option value='neuter'>Neuter</option>");
				var optOther = $("<option value='other'>Other</option>");
				var optNone = $("<option value='none'>None</option>");
				
				switch($(this).text())
				{
					case 'Masculine':
						optMasc.attr('selected', 'true');
						break;
					case 'Feminine':
						optFem.attr('selected','true');
						break;
					case 'Neuter':
						optNeut.attr('selected','true');
						break;
					case 'Other':
						optOther.attr('selected','true');
						break;
					case 'None':
						optNone.attr('selected','true');
						break;
				}
				input.append(optMasc);
				input.append(optFem);
				input.append(optNeut);
				input.append(optOther);
				input.append(optNone);
				
				$(this).replaceWith(input);
				break;
			case 'subjectValue':
				for (var i = 0; i < subjectFields.length; i++)
				{
					var field = subjectFields[i];
					var opt = $('<option></option>');
					opt.attr('value', field);
					opt.text(field);
					if (field == $(this).text()) opt.prop('selected', true);
					input.append(opt);
				}
				
				var opt = $('<option></option>');
				opt.attr('value', 'delete');
				opt.text('Remove Subject Field');
				input.append(opt);
				
				var opt = $('<option></option>');
				opt.attr('value', 'new');
				opt.text('Add Subject Field');
				input.append(opt);
				
				$(this).replaceWith(input);
				break;
			case 'langValue':
				for (code in langCodeValueList)
				{
					opt = $('<option></option>');
					opt.val(code);
					opt.text(langCodeValueList[code]);
					if (langCodeValueList[code] == $(this).text()) opt.prop('selected',true);
					input.append(opt);
				}
				
				$(this).replaceWith(input);
				break;
		}
	
		input.focus();
	});
	$('body').on('focusout', '.inputListValue', function(){
			
			if ($(this).attr('id').split('_')[0] == "subjectValue")
			{
				var subjectValueId = '#subjectValueInput_'+
									$(this).attr('id').split('_')[1] +'_'+
									$(this).attr('id').split('_')[2] +'_'+
									$(this).attr('id').split('_')[3];
				if ($(this).attr('id').split('_').length > 4) subjectValueId += '_L';
				switch($(this).val())
				{
					case 'new':
						$(subjectValueId).val('');
						$(subjectValueId).attr('type', 'text');
						return;
						break;
					case '---':
						$(subjectValueId).attr('type', 'hidden');
						$(subjectValueId).val('');
						break;
					default:
						$(subjectValueId).attr('type', 'hidden');
						$(subjectValueId).val($(this).val());
				}
			}
			var input = $('<span class="editList"></span>');
			input.attr('id',$(this).attr('id'));
			var currentText;
			
			switch($(this).val())
			{
				case "preferredTerm-admn-sts":
					currentText = "Preferred";
					break;
				case "admittedTerm-admn-sts":
					currentText = "Admitted";
					break;
				case "deprecatedTerm-admn-sts":
					currentText = "Deprecated";
					break;
				case "supersededTerm-admn-sts":
					currentText = "Superseded";
					break;
				case 'noun':
					currentText = "Noun";
					break;
				case 'verb':
					currentText = "Verb";
					break;
				case 'adjective':
					currentText = "Adjective";
					break;
				case 'adverb':
					currentText = "Adverb";
					break;
				case 'properNoun':
					currentText = "Proper Noun";
					break;
				case 'unspecified':
					currentText = "Unspecified";
					break;
				case 'masculine':
					currentText = "Masculine";
					break;
				case 'feminine':
					currentText = "Feminine";
					break;
				case 'neuter':
					currentText = "Neuter";
					break;
				case 'other':
					currentText = "Other";
					break;
				case 'none':
					currentText = "None";
					break;
				case 'delete':
					currentText = '---';
					break;
				default:
					if (langCodeValueList[$(this).val()] == previousText)
					{
						currentText = previousText;
					}
					else
					{
						currentText = $(this).val();
					}
			}
			
			$(this).replaceWith( input );
			input.text(currentText);

			if (currentText != previousText)
			{
				setChanged(true);
			
				navObject = getNavObject()
				e = navObject.e;
				l = navObject.l;
				t = navObject.t;
			
				//update entries
				var type = input.attr('id').split('_')[0];
				switch (type)
				{
					case 'statusValue':
						entries[e].languages[l].terms[t].status = $(this).val();
						break;
					case 'posValue':
						entries[e].languages[l].terms[t].pos = $(this).val();
						if ($(this).val() != 'unspecified')
						{
							entries[e].languages[l].terms[t].pos = $(this).val();
						}
						else
						{
							if (typeof entries[e].languages[l].terms[t].pos != 'undefined')
							{
								delete entries[e].languages[l].terms[t]['pos'];
							}
						}
						break;
					case 'genderValue':
						if ($(this).val() != 'none')
						{
							entries[e].languages[l].terms[t].gender = $(this).val();
						}
						else
						{
							if (typeof entries[e].languages[l].terms[t].gender != 'undefined')
							{
								delete entries[e].languages[l].terms[t]['gender'];
							}
						}
						break;
				//SUBJECTS	
					case 'subjectValue':
						if ($(this).val() != "new" && $(this).val() != 'delete')
						{
							entries[e].subject_field = $(this).val();
							setLevel('edit', 'entry');
						}
						else if ($(this).val() == 'delete')
						{
							if (typeof entries[e].subject_field !== 'undefined')
							{
								delete entries[e]['subject_field'];
							}
						}
						break;
					//LANGUAGES
					case 'langValue':
						// Check if the same language exists already
						// If it does: move tig to existing
						input.text(langCodeValueList[currentText]);
						lang_code_exists = false;
						existing_lang_index = 0;
						for (var x = 0; x < entries[e].languages.length; x++)
						{
							var lang = entries[e].languages[x];
							if (lang.code == currentText)
							{
								lang_code_exists = true;
								existing_lang_index = x;
								break;
							}
						}
						if (lang_code_exists)
						{
							entries[e].languages[existing_lang_index].terms.push(
									entries[e].languages[l].terms[t]
								);
							entries[e].languages[l].terms.splice(t,1);
							if (entries[e].languages[l].terms.length < 1)
							{
								entries[e].languages.splice(l,1);
							}
							for (var x = 0; x < entries[e].languages.length; x++)
							{
								var lang = entries[e].languages[x];
								if (lang.code == currentText)
								{
									existing_lang_index = x;
									break;
								}
							}
							setNavObject(e,existing_lang_index,(entries[e].languages[existing_lang_index].terms.length-1));
							setLevel('edit', 'lang');
						}
						else
						{
							new_language = new Language(currentText);
							new_language.terms.push(entries[e].languages[l].terms[t]);
							entries[e].languages[l].terms.splice(t,1);
							if (entries[e].languages[l].terms.length < 1)
							{
								entries[e].languages.splice(l,1);
							}
							entries[e].languages.push(new_language);
							setNavObject(e,(entries[e].languages.length-1),0);
							setLevel('edit', 'lang');
						}
						getLists();
						
						break;
				}
				setLevel('edit', 'tig');
			}
			
	});
	
	//subject field manual value
	$('body').on('change', '.editSubject', function(){
		var subjectValueId = '#subjectValue_'+
									$(this).attr('id').split('_')[1] +'_'+
									$(this).attr('id').split('_')[2] +'_'+
									$(this).attr('id').split('_')[3];
		if ($(this).attr('id').split('_').length > 4) subjectValueId += '_L';
		var e = $(this).attr('id').split('_')[1];
		
		var input = $('<span class="editList"></span>');
		input.attr('id',$(this).attr('id'));
		if ($(this).val() !== "")
		{
			setChanged(true);
			input.val($(this).val());
			input.text($(this).val());
			entries[e].subject_field = $(this).val();
			setLevel('edit','entry');
		}
		else
		{
			var subjValue = (typeof entries[e].subject_field !== 'undefined' && entries[e].subjectfield !== '')?
					entries[e].subject_field : '---';
			input.val(subjValue);
		}
		$(subjectValueId).replaceWith(input);
		$(this).val('');
		$(this).prop('type','hidden');
	});
	
	//references
	$('body').on('click', '.editReference, .refContent', function(){
		var type = $(this).attr('id').split('_')[0];
		var level = $(this).attr('id').split('_')[3];
		var navObject = getNavObject();
   
		targetSelectModal = new jBox('Modal',{
			closeOnClick: 'body',
			title: 'Select a reference:',
			position: {
				x: 'left',
				y: 'top'
			},
			offset: {
				x: 10,
				y: 10
			},
			ajax: {
				url: '{{path("search_termbase_mini")}}',
				method: 'POST',
				data: {
					'e':navObject.e,
					'l':navObject.l,
					't':navObject.t,
					'targetElementId':$(this).attr('id')
				},
				reload: true
			},
            onCloseComplete: function(){
                targetSelectModal.destroy();
            }
		}).open();
	});
	//external references
	$('body').on('click', '.editExtRef, .extRefContent', function(){
		var type = $(this).attr('id').split('_')[0];
		var level = $(this).attr('id').split('_')[3];
		var navObject = getNavObject();
 
		extRefSelectModal = new jBox('Modal',{
			closeOnClick: 'body',
			title: 'Edit external reference:',
			position: {
				x: 'left',
				y: 'top'
			},
			offset: {
				x: 10,
				y: 10
			},
			ajax: {
				url: '{{path("entry_new_ext_ref")}}',
				method: 'POST',
				data: {
					'e':navObject.e,
					'l':navObject.l,
					't':navObject.t,
					'extRefElementId':$(this).attr('id')
				},
				reload: true
			},
            onCloseComplete: function(){
                extRefSelectModal.destroy();
            }
		}).open();
	});
	//images
	$('body').on('click', '.editImgRef, .imgContent', function(){
		var type = $(this).attr('id').split('_')[0];
		var level = $(this).attr('id').split('_')[3];
		var navObject = getNavObject();

		imgSelectModal = new jBox('Modal',{
			closeOnClick: 'body',
			title: 'Edit Image Reference:',
			position: {
				x: 'left',
				y: 'top'
			},
			offset: {
				x: 10,
				y: 10
			},
			ajax: {
				url: '{{path("entry_new_image")}}',
				method: 'POST',
				data: {
					'e':navObject.e,
					'l':navObject.l,
					't':navObject.t,
					'imgElementId':$(this).attr('id')
				},
				reload: true
			},
            onCloseComplete: function(){
                imgSelectModal.destroy()
            }
		}).open();
	});
	//GEO
	$('body').on('click', '.editGeo', function(){
		var type = $(this).attr('id').split('_')[0];
		var level = $(this).attr('id').split('_')[3];
		var navObject = getNavObject();

		geoSelectModal = new jBox('Modal',{
			closeOnClick: 'body',
			title: 'Edit Image Reference:',
			position: {
				x: 'left',
				y: 'top'
			},
			offset: {
				x: 10,
				y: 10
			},
			ajax: {
				url: '{{path("entry_term_geo")}}',
				method: 'POST',
				data: {
					'e':navObject.e,
					'l':navObject.l,
					't':navObject.t,
                    'geoElementId':$(this).attr('id'),
					'geoElementValue':$(this).text()
				},
				reload: true
			},
            onCloseComplete: function(){
                geoSelectModal.destroy();
            }
		}).open();
	});
	
</script>
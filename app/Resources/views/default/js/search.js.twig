<script>

$(document).ready(init);
var entries;
var entriesBackup;
var persons;
var tigCount = 0;
var termbaseId;
var termbaseName;
var langCodeMaster;
var langCodeValueList = {};
var regionCodeValueList = {};
var subjectFields = [];
var langList = [];
var regionList =[];
var tigList = [];
var termList = [];
var resultList = [];
var resultRows = [];
var activeModal = {};
var pendingModal = {};
var quickLangSelectModal = {};
var targetSelectModal = {};
var extRefSelectModal = {};
var geoSelectModal = {};
var imgSelectModal = {};
var clickToViewTip = {};
var clickToEditTip = {};
var clickToAddNoteTip = {};
var displayRefTargetTip = {};
var displayExtRefTargetTip = {};
var displayImgTargetTip = {};
var geoEditTip = {};
var addNoteModal = {};
var newEntryModal = {};
var addTermModal = {};
var saveConfirmModal = {};
var saveConfirmModalMini = {};
var regionCodeMaster = [];
var activeIndex = -1;
var displayIndex = 0;
var showTips = (localStorage['showTips'] == 'false') ? false : true || true;
var changed = false;
var editLevel = {'entry': false, 'lang': false, 'tig': false};
var addLevel = {'entry': false, 'lang': false, 'tig': false};
var activeIsSmall = true;

$(document).ready($('#resultsTable').tablesorter());

function init()
{
	entries = $.parseJSON('{{entries|json_encode}}');
	persons = $.parseJSON('{{persons|json_encode}}');

	getLists();
	termbaseId = '{{id|raw}}';
	termbaseName = $('#termbaseName').text();
	
	if (!showTips){$('#myonoffswitch').prop('checked', false);} 

	$('#entry_count').text('This termbase has '+entries.length+' entries ('+tigCount+' terms).');
	
	//add options to #transacPerson select
	// transacPersonLoader();
	
	//add options to #languageCode select
	$.getJSON('{{path("lang_codes_list")}}', function(data){
		langCodeLoader(data);
		{% if GET is defined %}
			getVars = $.parseJSON('{{GET|json_encode}}');
		{% else %}
			getVars = 0
		{% endif %}

		if (getVars != 0 && getVars['previous_forms'] != 0)
		{
			$('#term').val(getVars['term_val']);
			$('#pos').val(getVars['pos_val']);
			$('#languageCode').val(getVars['lang_val']);
			$('#subjectField').val(getVars['subject_val']);
			$('#approval').val(getVars['approval_val']);
			$('#customer').val(getVars['customer_val']);
			searchForm(false);
		}
		else
		{
			searchForm(true);
		}
	});
	
	//load region codes
	$.ajax({
		dataType: "json",
		url: '{{path("region_codes_list")}}',
		async: false,
		success: function(data){
			regionCodeLoader(data);
		}
	});
	//$.getJSON('{{path("region_codes_list")}}', function(data){
	//	regionCodeLoader(data);
	//});

	//non-unique jBox windows
	addNoteModal = new jBox('Modal', {
		height: 300,
		width: 300,
		closeOnClick: false,
	});
	
	//create new Entry modal
	newEntryModal = new jBox('Modal',{
		title: "New Entry:",
		position: {
			x: 50,
			y: 50
		},
		ajax: {
			url: "{{path('entry_new')}}", 
			data: {
				'termbaseId':termbaseId, 
				},
			reload: true
			},
		onClose: function(){
			
		}
	});
}

//***************************Variable SET/GET*************************************
function constructDate()
{
	var today = new Date();
	var day = today.getDate();
	if (day < 10) day = "0"+day;
	var month = today.getMonth()+1;
	if (month < 10) month = "0"+month;
	var year = today.getFullYear();
	
	return year+'-'+month+'-'+day;
}

function setLevel(type, level)
{
	switch(level)
	{
		case 'entry':
			if (type == 'add')
			{
				addLevel[level] = true;
			}
			else if (type == 'edit')
			{
				editLevel[level] = true;
			}
			break;
		case 'lang':
			if (type == 'add')
			{
				addLevel[level] = true;
			}
			else if (type == 'edit')
			{
				editLevel[level] = true;
			}
			break;
		case 'tig':
			if (type == 'add')
			{
				addLevel[level] = true;
			}
			else if (type == 'edit')
			{
				editLevel[level] = true;
			}
			break;
	}
}

function checkTransac(e,l,t)
{
	if (editLevel.entry||editLevel.lang||editLevel.tig)
	{
		pid = checkPerson();
		transac = new Transaction();
		transac.person = '{{app.user.fullusername|raw}}';
		transac.type = 'modification';
		transac.target = pid;
		transac.date = constructDate();
		
		if (editLevel.entry)
		{
			if (typeof entries[e].transactions != 'undefined')
			{
				entries[e].transactions.push(transac);
			}
			else
			{
				entries[e]['transactions'] = [transac];
			}
		}
		if (editLevel.lang)
		{
			if (typeof entries[e].languages[l].transactions != 'undefined')
			{
				entries[e].languages[l].transactions.push(transac);
			}
			else
			{
				entries[e].languages[l]['transactions'] = [transac];
			}
		}
		if (editLevel.tig)
		{
			if (typeof entries[e].languages[l].terms[t].transactions != 'undefined')
			{
				entries[e].languages[l].terms[t].transactions.push(transac);
			}
			else
			{
				entries[e].languages[l].terms[t]['transactions'] = [transac];
			}
		}
	}
}

function checkPerson()
{
	pid = '';
	if ('{{app.user.personId|raw}}' == '')
	{
		result = '';
		personExists = false;
		
		for (var p = 0; p < persons.length; p++)
		{
			if (persons[p].fn == '{{app.user.fullusername|raw}}')
			{
				personExists = true;
				pid = persons[p].id;
				break;
			}
		}
		
		if (personExists)
		{
			$.ajax({ //set personId for person
				url: '{{path("user_personId_edit")}}',
				method: 'POST',
				data: {
					'name': '{{app.user.username}}',
					'pid': pid
				}
			});
		}
		else //add a new person
		{
			role = '';
			{%- if is_granted('ROLE_ADMIN') -%}
				role = 'admin';
			{%- elseif is_granted('ROLE_STAFF') -%}
				role = 'staff';
			{%- else -%}
				role = 'user';
			{%- endif -%}

			person = {
				'email': '{{app.user.email|raw}}',
				'fn': '{{app.user.fullusername|raw}}',
				'role': role
			};
			
			$.ajax({ //set personId for person
				url: '{{path("user_person_add")}}',
				method: 'POST',
				data: {
					'tid': termbaseId,
					'name': '{{app.user.username}}',
					'person': person
				},
				success: function(data){
					pid = data;
				}
			});
		}
	}
	else
	{
		pid = '{{app.user.personId|raw}}';
	}
	return pid;
}

function getPendingModal()
{
	if (typeof pendingModal.open != 'undefined') pendingModal.open();
	pendingModal = {}; //clear pending
}

function getLists()
{
	langList = [];
	tigList = [];
	termList = [];
	tigCount = 0;
	for (var e = 0; e < entries.length; e++)
	{
		var languages = entries[e]['languages'];
		//create List structures
		for (var l = 0; l < languages.length; l++)
		{
			var language = languages[l];
			var tigs = languages[l]['terms'];
			langList.push({
					'entry_id':e, 
					'language_id':l,
					'language':language
				});
				
			for (var t = 0; t < tigs.length; t++)
			{
				tigCount++;
				var term = tigs[t]['term'];
				var tig = tigs[t];
				tigList.push({
					'entry_id':e,
					'language_id':l,
					'tig_id':t,
					'tig':tig
				});
				
				termList.push({
					'entry_id':e,
					'language_id':l,
					'tig_id':t,
					'term':term
				});
			}
		}
	}
	
	//add options to #subjectField select
	subjectFieldLoader();
	
	//add options to #customer select
	customerLoader();
}

function setChanged(bool)
{
	changed = bool;
	
	if (changed)
	{	
		if (typeof saveConfirmModalMini.destroy != 'undefined') saveConfirmModalMini.destroy();
		//create save modal
		saveConfirmModalMini = new jBox('Modal', {
			closeOnClick: false,
			closeButton: 'title',
			repositionOnOpen: true,
			addClass: 'saveConfirmModalMini',
			width: 190,  //should change in CSS too
			height: 60,
			position: {
				x: 10,
				y: 10
			},
			ajax: {
				url: "{{path('entry_save_page')}}",
				method: 'POST',
				data: {
					'termbaseId':termbaseId, 
					}, 
				reload: true
			}
		});
		saveConfirmModalMini.open();
	}
	
}

function deleteEntry(entryIndex)
{
	//alert(JSON.stringify(entries[entryIndex]));
			$.ajax({
				url: "{{path('entry_delete')}}",
				method: "POST",
				data: {
					'termbaseId': termbaseId,
					'entry': entries[entryIndex],
				},
				success: function(result){
					new jBox('Notice', {
						theme: 'NoticeBorder',
						color: 'blue',
						content:'<p>Entry Deleted</p>',
						attributes: { 
							x: 'right',
							y: 'bottom'
						}
					});
					activeModal.close();
					entries.splice(entryIndex,1);

					//searchForm(true);//refresh result list
					//instead of calling searchForm, just 'refresh'
					if (!window.location.hash)
					{
						window.location.replace(window.location.protocol + '//' + window.location.hostname + window.location.pathname + 
							"?id="+termbaseId+"&name="+termbaseName+
							(($('#term').val() != ""||$('#pos').val() != ""||$('#languageCode').val() != ""||$('#subjectField').val() != ""||$('#approval').val()||$('#customer').val() != "")? "&previous_forms=1" : "&previous_forms=0")+
							(($('#term').val() != "")? "&term_val="+$('#term').val() : "")+
							(($('#pos').val() != "")? "&pos_val="+$('#pos').val() : "")+
							(($('#languageCode').val() != "")? "&lang_val="+$('#languageCode').val() : "")+
							(($('#subjectField').val() != "")? "&subject_val="+$('#subjectField').val() : "")+
							(($('#approval').val() != "")? "&approval_val="+$('#approval').val() : "")+
							(($('#customer').val() != "")? "&customer_val="+$('#customer').val() : "")+
							""
							);
					}
				},
				error: function(result){
					new jBox('Notice', {
						theme: 'NoticeBorder',
						color: 'red',
						content:'<p>Update Error</p>'+
								'<p>Entry not deleted!</p>',
						attributes: { 
							x: 'right',
							y: 'bottom'
						}
					});
				}
			});
}

function saveChanges()
{
	navObject = getNavObject();
	e = navObject.e;
	l = navObject.l;
	t = navObject.t;
	
	checkTransac(e,l,t);
	
	//alert(JSON.stringify(entries[e]));
	$.ajax({
		url: "{{path('entry_update')}}",
		method: 'POST',
		data: {
			'termbaseId': termbaseId,
			'entry': entries[e],
		},
		success: function(result){
			new jBox('Notice', {
				theme: 'NoticeBorder',
				color: 'blue',
				content:'<p>Entry Updated</p>',
				attributes: { 
					x: 'right',
					y: 'bottom'
				}
			});
			
			getLists();
			searchForm(true);//refresh result list
			//sort Table
			//append some content to the tbody
		},
		error: function(result){
			new jBox('Notice', {
				theme: 'NoticeBorder',
				color: 'red',
				content:'<p>Update Error</p>'+
						'<p>Entry not updated!</p>',
				attributes: { 
					x: 'right',
					y: 'bottom'
				}
			});
		}
	});
	
	
	(activeIsSmall) ? shrinkModalButton_pressed() : expandModalButton_pressed();
	
	setChanged(false);
	getPendingModal();
}

function cancelChanges(message)
{
	//refresh entries and clear all changes
	$.ajax({
		async: false,
		url: '{{path("entry_get")}}',
		method: 'POST',
		dataType: 'json',
		data: {
			'id': termbaseId
		},
		success: function(response){
			entries = response;
		}
	});

	
	new jBox('Notice', {
		theme: 'NoticeBorder',
		color: 'green',
		content:'<p>'+message+'</p>',
		attributes: { 
			x: 'right',
			y: 'bottom'
		}
	});
	
	(activeIsSmall) ? shrinkModalButton_pressed() : expandModalButton_pressed();

	editLevel = {'entry': false, 'lang': false, 'tig': false};
    addLevel = {'entry': false, 'lang': false, 'tig': false};
	setChanged(false);
	getPendingModal();
}

function getNavObject()
{
	var idSplit = activeModal.id.split('_');
			
	var e = idSplit[1]; 
	var l = idSplit[2];
	var t = idSplit[3];
	
	var navObject = {
		'e': e,
		'l': l,
		't': t
	};
	
	return navObject;
}

function closeConfirmModal()
{
	if (typeof saveConfirmModalMini.close != 'undefined') saveConfirmModalMini.close();
}

function clearSearchQueries()
{
	$('#term').val('');
	$('#pos').val('');
	$('#languageCode').val('');
	$('#subjectField').val('');
	$('#approval').val('');
	$('#customer').val('');
	$('#transacPerson').val('');
	searchForm(true);
}

//***************************Click handlers***************************************

$('#term').keyup(function(event) {
	if (event.keyCode == 13) {
		$('#search_all_button').click();
		return false;
	 }
});


//on hover over a term
$('body').on('mouseover','.term_item',function(){
	if(typeof clickToViewTip.destroy != 'undefined') clickToViewTip.destroy();
	clickToViewTip = new jBox('Mouse', {
			attach: $(this),
			content: 'Click to view entry!',
			addClass: 'clickToViewTip'
		}).open();
});

//on click of a term
$('body').on('click','.term_item',function(){

	var resultId = $(this).attr('id');
		var idSplit = resultId.split('_');
		
		var e = idSplit[1]; 
		var l = idSplit[2];
		var t = idSplit[3];
		
	pendingModal = new jBox('Modal', {
		width: 600,
		height: 400,
		id: resultId+'_modal',
		attach: $('#'+resultId+"_term"),
		title: 'Term Information',
		overlay: true,
		onOpen: function(){
			smallWindowConstruct(this);
			modalListener(this);
			
			if (showTips)
			{
				new jBox('Notice',{
					autoClose: 15000,
					content: '<p>Click on a value to edit it!<p>'+
								'<p>Clicking the shaded area will close the details window.</p>'+
								'<p>You will be asked if you want to save any changes you made.</p>'+
								'<p>Clicking on this notice will close it.</p>',
					color: 'blue',
					position: {
						x: 'right',
						y: 'center'
					},
					offset: {
						x: -20
					}
				});
			}
		},
		onClose: function(){
			closeConfirmModal();
			checkChanges();
			
			if (!changed) setTimeout(getPendingModal(),500);
		}
	});
	
	if(typeof activeModal.destroy == 'undefined')
	{
		pendingModal.open();
		pendingModal = {}; //clearpending
	}
	else
	{
		activeModal.close().destroy();
	}
});


function addNewEntry()
{
	newEntryModal.open();
}

function searchClick()
{
	searchForm(false);
}

function nextResultsClick()
{
	displayIndex = (displayIndex + 50 < resultList.length - 1) ? displayIndex + 50 : displayIndex;
	
	printResults();
}

function prevResultsClick()
{
	displayIndex = (displayIndex - 50 >= 0) ? displayIndex - 50 : displayIndex = 0;

	printResults();
}

function toggleTips(toggleswitch)
{
	showTips = toggleswitch.checked;
	localStorage['showTips'] = showTips;
}

function addTerm(entryIndex,langIndex,tigIndex, type) //type is "synonym" or "translation"
{
	langs = [];
	
	for(var i = 0; i < entries[e].languages.length; i++)
	{
		switch(type.toUpperCase())
		{
			case 'SYNONYM':
				if (i != langIndex) continue;
				break;
			case 'TRANSLATION':
				if (i == langIndex) continue;
		}
		
		langs.push(entries[e].languages[i].code)
	}
	if (typeof addTermModal.destroy != 'undefined') addTermModal.destroy();
	addTermModal = new jBox('Modal', {
		closeButton: 'title',
		repositionOnOpen: true,
		title: 'Add Term:',
		position: {
			x: 50,
			y: 50
		},
		ajax: {
			url: "{{path('entry_new_term')}}",
			method: 'POST',
			data: {
				'termbaseId':termbaseId, 
				'entryIndex':entryIndex,
				'langs':langs,
				'type':type
				}, 
			reload: true
		}
	});
	
	addTermModal.open();
}

//******************************TEXT OUTPUTS******************************************

function exportTermbase(id)
{
	var route = "{{ path('export_termbase', {'id':"PLACEHOLDER"} ) }}";
	window.location = route.replace("PLACEHOLDER", id);
}

function noResultsError()
{
	var error = $('<tr></tr>');
	error.attr('class', 'noQueriesError search_result');
	error.text("No Search Results were found.");
	$('#resultsTable').append(error);
}

function printResults()
{
	if (typeof resultList == 'undefined') return false;
	
	resultList.sort();
	$('.search_result').remove();

	showCount = (displayIndex + 50 < resultList.length) ? 50 : resultList.length - displayIndex;
	$('#entry_count').text('Showing ' + showCount + ' of '+resultList.length+' result(s) from '+tigCount+' total terms.');
	for (var i = displayIndex; i < displayIndex + 50 && i < resultList.length; i++) 
	{	
		var resultId = resultList[i];
		var idSplit = resultId.split('_');
		
		var e = idSplit[1]; 
		var l = idSplit[2];
		var t = idSplit[3];
		
				
		// <th>Term</th>
		// <th>Language</th>
		// <th>Synonym(s)</th>
		// <th>Translation(s)</th>
		// <th>Subject Field</th>
		// <th>Part of Speech</th>
		// <th>Approval Status</th>
		// <th>Customer(s)</th>
		// <th>Project</th>
		
		var resultRow = $('<tr></tr>');
		resultRow.attr('id', resultId);
		resultRow.attr('class', 'search_result');
		
		//term
		var resultTerm = $('<td></td>');
		resultTerm.attr('id', resultId+'_term');
		resultTerm.attr('class', 'result_term term_item');
		resultTerm.text(entries[e]['languages'][l]['terms'][t]['term']);
		
		//Language
		//lang
		var code = entries[e]['languages'][l]['code'];
		var langName = "";
		var exists = false;
		for (var z = 0; z < langCodeMaster.length; z++)
		{
			if ($.inArray(code.toLowerCase(),langCodeMaster[z].codes) > -1)
			{
				exists = true;
				langName = langCodeMaster[z].name;
			}
		}
		if (!exists) langName = code;
		var resultLangCode = $('<td></td>');
		if(typeof entries[e]['languages'][l]['terms'][t].geo != 'undefined')
		{
			region = regionCodeValueList[entries[e]['languages'][l]['terms'][t].geo];
			resultLangCode.text(langName+" --- "+region);
		}
		else
		{
			resultLangCode.text(langName);
		}
		
		//Synonyms + Translations
		var resultSynonym = $('<td></td>');
		var resultTranslations = $('<td></td>');
		var synonymsExist = false;
		var translationsExist = false;
		for (var z = 0; z < entries[e]['languages'].length; z++)
		{		
			for (var x = 0; x < entries[e]['languages'][z].terms.length; x++)
			{
				if (z == l) //synonyms
				{
					if (entries[e]['languages'][z].terms.length - 1 > 0)
					{
						synonymsExist = true;
						if (x == t) continue;
						var synonymTerm = $('<p></p>');
						synonymTerm.attr('id', 'I_'+e+'_'+z+'_'+x+'_term_'+l+'_'+t); //l and t are added to make these values unique
						synonymTerm.attr('class', 'term_item');
						
						if (typeof entries[e]['languages'][z].terms[x].geo == 'undefined')
						{
							synonymTerm.text(entries[e]['languages'][z].terms[x].term);
						}
						else
						{
							region = regionCodeValueList[entries[e]['languages'][z].terms[x].geo];
							synonymTerm.text(entries[e]['languages'][z].terms[x].term+" --- "+region);
						}
						resultSynonym.append(synonymTerm);	
					}
				}
				else //translations
				{
					if (entries[e]['languages'][z].terms.length > 0)
					{
						translationsExist = true;
						var transTerm = $('<p></p>');
						transTerm.attr('id', 'I_'+e+'_'+z+'_'+x+'_term_'+l+'_'+t);;
						transTerm.attr('class', 'term_item');;
						
						if (typeof entries[e]['languages'][z].terms[x].geo == 'undefined')
						{
							transTerm.text(entries[e]['languages'][z].terms[x].term+' ('+entries[e]['languages'][z].code+')');
						}
						else
						{
							region = regionCodeValueList[entries[e]['languages'][z].terms[x].geo];
							transTerm.text(entries[e]['languages'][z].terms[x].term+' ('+entries[e]['languages'][z].code+') --- '+region);
						}
						resultTranslations.append(transTerm);	
					}
					
				}
				
			}
		}
		if (!synonymsExist) resultSynonym.text('---');
		if (!translationsExist) resultTranslations.text('---');
		
		//Subject Field
		var resultSubject = $('<td></td>');
		var subject = (typeof entries[e]['subject_field'] != 'undefined') ? entries[e]['subject_field'] : '---';
		resultSubject.text(subject);
		
		//pos
		var resultPos = $('<td></td>');
		var pos = (typeof entries[e]['languages'][l]['terms'][t]['pos'] != 'undefined') ? entries[e]['languages'][l]['terms'][t]['pos'] : 'Unspecified';
		resultPos.text(pos);
		
		//approval status
		var resultStatus = $('<td></td>');
		var status = (typeof entries[e]['languages'][l]['terms'][t]['status'] != 'undefined') ? entries[e]['languages'][l]['terms'][t]['status'] : '---';
		switch(status)
		{
			case "preferredTerm-admn-sts":
				resultStatus.text("Preferred");
				break;
            case "admittedTerm-admn-sts":
				resultStatus.text("Admitted");
				break;
			case "deprecatedTerm-admn-sts":
				resultStatus.text("Deprecated");
				break;
			case "supersededTerm-admn-sts":
				resultStatus.text("Superseded");
				break;
			
		}
		
		//customers
		var resultCustomers = $('<td></td>');
		if (typeof entries[e]['languages'][l]['terms'][t]['customers'] != 'undefined')
		{
			var customers = [];
			for (var z = 0; z < entries[e]['languages'][l]['terms'][t]['customers'].length; z++)
			{
				var cust = entries[e]['languages'][l]['terms'][t]['customers'][z];
				if ($.inArray(cust, customers) < 0)
				{
					customers.push(cust);
					var customerP = $('<p></p>');
					customerP.text(cust);
					resultCustomers.append(customerP);
				}
			}
		}
		else
		{
			resultCustomers.text('---');
		}

		//projects
		var resultProjects = $('<td></td>');
		if (typeof entries[e]['languages'][l]['terms'][t]['projects'] != 'undefined')
		{
			var projects = [];
			for (var z = 0; z < entries[e]['languages'][l]['terms'][t]['projects'].length; z++)
			{
				var pro = entries[e]['languages'][l]['terms'][t]['projects'][z];
				if ($.inArray(pro, projects) < 0)
				{
					projects.push(pro);
					var projectP = $('<p></p>');
					projectP.text(pro);
					resultProjects.append(projectP);
				}
			}
		}
		else
		{
			resultProjects.text('---');
		}
		
		//// Transac
		// var resultTransacPersonEntry = $('<td></td>');
		// if (typeof entries[e]['transactions'] != 'undefined')
		// {
			// for (var x = 0; x < entries[e]['transactions'].length; x++)
			// {
				// var resultTransacPerson_item = $('<p></p>');
				// resultTransacPerson_item.text(entries[e]['transactions'][x].person);
				// resultTransacPersonEntry.append(resultTransacPerson_item);
			// }
		
		// }
		
		resultRow.append(resultTerm);
		resultRow.append(resultLangCode);
		resultRow.append(resultSynonym);
		resultRow.append(resultTranslations);
		resultRow.append(resultSubject);
		resultRow.append(resultPos);
		resultRow.append(resultStatus);
		resultRow.append(resultCustomers);
		resultRow.append(resultProjects);
		
		resultRows.push(resultRow);
		$('#resultTableBody').append(resultRow);

		
		// <th>Term</th>  
		// <th>Language</th>
		// <th>Synonym(s)</th>
		// <th>Translation(s)</th>
		// <th>Subject Field</th>
		// <th>Part of Speech</th>
		// <th>Approval Status</th>
		// <th>Customer(s)</th>
		// <th>Project</th>
		
		var idSpan = $('<input>');
		idSpan.text(resultId);
		idSpan.attr('class', 'idList');
		idSpan.attr('type', 'hidden');
	}
	//append some content to the tbody
	$("#resultsTable").trigger('update');
}

function checkChanges()
{
	if (changed)
	{	
		if (typeof saveConfirmModal.destroy != 'undefined') saveConfirmModal.destroy();
		saveConfirmModal = new jBox('Confirm', {
			closeOnClick: false,
			width: 200,
			height: 100,
			content: 'Changes have been made to an entry.  Would you like to keep these or discard them?',
			confirmButton: "Save Changes",
			confirm: saveChanges,
			cancelButton: "Discard",
			cancel: function(){
                                entries = entriesBackup;
				cancelChanges('Changes ignored.');
			},
		});
		saveConfirmModal.open();
	}
}

//windowContent Constructors
function smallWindowConstruct(modal)
{
	var idSplit = modal.id.split('_');
		
	var e = idSplit[1]; 
	var l = idSplit[2];
	var t = idSplit[3];
	
	var navObject = {
		'e': e,
		'l': l,
		't': t
	};
	modal.ajax({url: "{{path('jbox_small')}}", method: 'POST', data: {'entries':JSON.stringify(entries), 'termbaseId':termbaseId, 'nav': navObject, 'search_all': 'false'}});
	
	activeIsSmall = true;
}

//large window constructor
function largeWindowConstruct()
{ 
	
}


//*************************modalWindow listeners*****************************************
function modalListener(modal)
{
	activeModal = modal;
	activeModal.setHeight(200);
	activeModal.setWidth(400);
	// $('.expandButton').text('More Details');
	// $('.expandButton').attr('onClick', 'expandModalButton_pressed()');
}

function deleteModalButton_pressed(entryIndex)
{
	var confirmModal = new jBox('Confirm', {
		closeOnClick: false,
		width: 200,
		height: 20,
		content: 'Delete this entry?',
		cancelButton: "Delete",
		cancel: function(){
			deleteEntry(entryIndex);
		},
		confirmButton: 'Cancel',
		confirm: function(){
			cancelChanges('Changes ignored.');
		},
	});
	confirmModal.open();
}

function deleteTermModalButton_pressed(e,l,t)
{
	var confirmModal = new jBox('Confirm', {
		closeOnClick: false,
		width: 200,
		height: 20,
		content: 'Delete this term?',
		cancelButton: "Delete",
		cancel: function(){ //Not really cancel, it is customized text
			if (entries[e].languages[l].terms.length > 1)
			{
				entries[e].languages[l].terms.splice(t,1);
				saveChanges();
			}
			else 
			{
				if (entries[e].languages.length > 1)
				{
					entries[e].languages.splice(l,1);
					saveChanges();
				}
				else
				{
					deleteEntry(e);
				}
			}
			activeModal.close();

			if (!window.location.hash)
			{
				window.location.replace(window.location.protocol + '//' + window.location.hostname + window.location.pathname + 
					"?id="+termbaseId+"&name="+termbaseName+
					(($('#term').val() != ""&&$('#pos').val() != ""&&$('#languageCode').val() != ""&&$('#subjectField').val() != ""&&$('#approval').val()&&$('#customer').val() != "")? "&previous_forms=1" : "&previous_forms=0")+
					(($('#term').val() != "")? "&term_val="+$('#term').val() : "")+
					(($('#pos').val() != "")? "&pos_val="+$('#pos').val() : "")+
					(($('#languageCode').val() != "")? "&lang_val="+$('#languageCode').val() : "")+
					(($('#subjectField').val() != "")? "&subject_val="+$('#subjectField').val() : "")+
					(($('#approval').val() != "")? "&approval_val="+$('#approval').val() : "")+
					(($('#customer').val() != "")? "&customer_val="+$('#customer').val() : "")+
					""
					);
			}
		},
		confirmButton: 'Cancel',
		confirm: function(){
			cancelChanges('Delete Term canceled.');
		},
	});
	confirmModal.open();
}

function expandModalButton_pressed()
{
	navObject = getNavObject();
	e = navObject.e;
	l = navObject.l;
	t = navObject.t;
		
	activeModal.ajax({url: "{{path('jbox_large')}}", method: 'POST', data: {'entries':JSON.stringify(entries), 'termbaseId':termbaseId, 'nav': navObject, 'no_edit': 'false', 'search_all': 'false'}});
	activeModal.setHeight(400);
	activeModal.setWidth(600);
	
	activeIsSmall = false;
	// $('.expandButton').text('Fewer Details');
	// $('.expandButton').attr('onClick', 'shrinkModalButton_pressed()');
}

function shrinkModalButton_pressed()
{
	navObject = getNavObject();
	e = navObject.e;
	l = navObject.l;
	t = navObject.t;
	
	activeModal.ajax({url: "{{path('jbox_small')}}", method: 'POST', data: {'entries':JSON.stringify(entries), 'termbaseId':termbaseId, 'nav': navObject, 'search_all': 'false'}});
	activeModal.setHeight(200);
	activeModal.setWidth(400);
	
	activeIsSmall = true;
	// $('.expandButton').text('More Details');
	// $('.expandButton').attr('onClick', 'expandModalButton_pressed()');
}



//***********************SELECT element pre-loaders*****************************
function langCodeLoader(langCodeData)
{
	langCodeMaster = langCodeData;
	var langCodes = [];
	
	for (var e = 0; e < langCodeMaster.length; e++)
	{
		var codeKey = '';
		if (langCodeMaster[e].codes[0] != '')
		{
			codeKey = langCodeMaster[e].codes[0];
		}
		else{
			codeKey = langCodeMaster[e].codes[2];
		}
	
		langCodeValueList[codeKey] = langCodeMaster[e].name;
	}
	
	for (var i = 0; i < langList.length; i++)
	{
		var code = langList[i].language.code;
		
		if ($.inArray(code, langCodes) < 0)
		{
			langCodes.push(code);
		}
	}
	for (var i = 0; i < langCodes.length; i++)
	{
		var code = langCodes[i];
		var exists;
		for (var e = 0; e < langCodeMaster.length; e++)
		{
			if ($.inArray(code.toLowerCase(),langCodeMaster[e].codes) > -1)
			{
				exists = true;
				
				var opt = $('<option></option>');
				opt.attr('value', code);
				opt.text(langCodeMaster[e].name);
				$('#languageCode').append(opt);
				break;
			}
		}
		if (!exists)
		{
			var opt = $('<option></option>');
			opt.attr('value', code);
			opt.text(code);
			$('#languageCode').append(opt);
		}
	}
}

function regionCodeLoader(regionCodeData)
{
	regionCodeMaster = regionCodeData;
	for (var e = 0; e < regionCodeMaster.length; e++)
	{
		var codeKey = regionCodeMaster[e].code;
		regionCodeValueList[codeKey] = regionCodeMaster[e].regionName;
	}
}

function transacPersonLoader()
{
	var personList = [];
	
	for (var e = 0; e < entries.length; e++)
	{
		var transactions = (typeof entries[e]['transactions'] != 'undefined') ? entries[e]['transactions'] : [];
		transacLooper(transactions, personList);
		
		var languages = entries[e]['languages'];
		for (var l = 0; l < languages.length; l++)
		{
			var language = languages[l];
			var transactions = (typeof language['transactions'] != 'undefined') ? entries[e]['transactions'] : [];
			transacLooper(transactions, personList);
			
			var tigs = language['terms'];
			for (var t = 0; t < tigs.length; t++)
			{
				var tig = tigs[t];
				var transactions = (typeof tig['transactions'] != 'undefined') ? entries[e]['transactions'] : [];
				transacLooper(transactions, personList);
			}
		}
	}
	for (var i = 0; i < personList.length; i++)
	{
		var person = personList[i];
		var opt = $('<option></option>');
		opt.attr('value', person);
		opt.text(person);
		$('#transacPerson').append(opt);
	}
}

function transacLooper(transactions, personList) //used by transacPersonLoader()
{
	if (typeof transactions == 'undefined') return;
	for (var i = 0; i < transactions.length; i++)
	{
		if($.inArray(transactions[i].person, personList) < 0)
		{	
			personList.push(transactions[i].person);
		}
	}
}

function subjectFieldLoader()
{
	subjectFields = [];
	$('#subjectField option').remove();
	for (var i = 0; i < entries.length; i++)
	{
		var field = entries[i].subject_field;
		
		if (typeof field != 'undefined' && $.inArray(field, subjectFields) < 0)
		{
			subjectFields.push(field);
		}
	}
	var opt = $('<option></option>');
	opt.attr('value', '');
	opt.text("Select a subject field...");
	$('#subjectField').append(opt);
	
	for (var i = 0; i < subjectFields.length; i++)
	{
		var field = subjectFields[i];
		var opt = $('<option></option>');
		opt.attr('value', field);
		opt.text(field);
		$('#subjectField').append(opt);
	}
}

function customerLoader()
{
	var customers = [];
	for (var i = 0; i < tigList.length; i++)
	{
		var tigObject = tigList[i];
		var customerList = tigObject.tig.customers;
		if (typeof customerList == 'undefined' || customerList.length < 1) continue;
		for (var c = 0; c < customerList.length; c++)
		{
			var customer = customerList[c];
			if (typeof customer != 'undefined' && $.inArray(customer, customers) < 0)
			{
				customers.push(customer);
			}
		}
	}
	for (var i = 0; i < customers.length; i++)
	{
		var customer = customers[i];
		var opt = $('<option></option>');
		opt.attr('value', customer);
		opt.text(customer);
		$('#customer').append(opt);
	}
}




//*******************************Search Functions************************************
function searchForm(searchAll)
{	
	$('.search_result').remove();

	var children = $('#searchQueries').children();
	displayIndex = 0; //reset displayIndex
	resultList = [];
	
	var results = [];
	var paramProvided = false;
	for (var i = 0; i < children.length; i++)
	{
		if (children[i].value != '' || searchAll)
		{
			paramProvided = true;
			var resultArray = [];
			switch(children[i].id){
				case 'term':
					query = (searchAll) ? '*' : children[i].value;
					resultArray = termFind(query);
					break;
				case 'pos':
					resultArray = tigFind(children[i].value, 'pos');
					break;
				case 'languageCode':
					resultArray = langFind(children[i].value, 'code');
					break;
				// case 'transacPerson':
					// resultArray = personFind(children[i].value);
					// break;
				case 'subjectField':
					resultArray = subjectFieldFind(children[i].value);
					break;
				case 'approval':
					//resultArray = approvalFind(children[i].value);
					resultArray = tigFind(children[i].value, 'status');
					break;
				case 'customer':
					resultArray = customerFind(children[i].value);
					break;
				default:
					break;
			}
			if (resultArray.length > 0) results.push(resultArray);
		}
	}
	
	//narrow results with each additional query provided
	if (results.length > 0 || paramProvided)
	{
		if (results.length > 1)
		{
			var rLengthSmall = results[0].length;
			var narrow = 0;
			for (var i = 0; i < results.length; i++)
			{
				if (results[i].length < rLengthSmall)
				{
					rLengthSmall = results[i].length;
					narrow = i;
				}
			}
			
			for (var y = 0; y < results[narrow].length; y++)
			{
				var exists = true;
				for (var x = 0; x < results.length; x++)
				{
					if (narrow==x) continue;
					
					if ($.inArray(results[narrow][y], results[x]) < 0)
					{
						exists = false;
					}
				}
				if (exists == true)
				{
					resultList.push(results[narrow][y]);
				}
			}
		}
		else
		{
			resultList = results[0];
		}
		
		if (typeof resultList != 'undefined' && resultList.length > 0)
		{
			printResults();
			
			if (showTips)
			{
				new jBox('Notice',{
					autoClose: 2000,
					content: 'Search complete!  Click a term to see more details',
					color: 'blue',
					attributes: {
						x: 'right',
						y: 'top'
					}
				});
			}
		}
		else
		{
			var error = $('<tr></tr>');
			error.attr('class', 'noQueriesError search_result');
			error.text("No matching terms were found.");
			$('#resultsTable').append(error);	
		}
	}
	else
	{
		var error = $('<tr></tr>');
		error.attr('class', 'noQueriesError search_result');
		error.text("No search parameters were entered!");
		$('#resultsTable').append(error);	
	}
}

function termFind(query)
{
	var results = [];
	for (var t = 0; t < termList.length; t++)
	{
		var term = termList[t];
		
		var re = (query != '*') ? new RegExp(query, "i") : new RegExp('.', "i");
		
		if (typeof term.term != 'undefined' &&
			term.term.search(re) > -1)
		{
			var resultId = "I-"+term.term.replace(/[^\w]/g,'~').toUpperCase()+"_"+term.entry_id+"_"+term.language_id+"_"+term.tig_id;
			
			if ($.inArray(resultId, resultList) < 0 && $.inArray(resultId, results) < 0)
			{
				results.push(resultId);
			}
		}
	}
	
	return results;
}

function tigFind(query, index)
{
	var results = [];
	for (var t = 0; t < tigList.length; t++)
	{
		var tig = tigList[t];
		
		if ( query == '*' || (query == 'unspecified' && typeof tig.tig[index] == 'undefined') || (typeof tig.tig[index] != 'undefined' &&
			tig.tig[index].toUpperCase() == query.toUpperCase()))
		{
			var resultId = "I-"+tig.tig.term.replace(/[^\w]/g,'~').toUpperCase()+"_"+tig.entry_id+"_"+tig.language_id+"_"+tig.tig_id;
			
			if ($.inArray(resultId, resultList) < 0 && $.inArray(resultId, results) < 0)
			{
				results.push(resultId);
			}
		}
	}
	
	return results;
}

function langFind(query, index)
{
	var results = [];
	for (var l = 0; l < langList.length; l++)
	{
		var language = langList[l].language;
		if ( typeof language[index] != 'undefined' &&
			language[index].toUpperCase() == query.toUpperCase())
		{
			var terms = language.terms;
			
			for (var t = 0; t < terms.length; t++)
			{
				var resultId = "I-"+terms[t].term.replace(/[^\w]/g,'~').toUpperCase()+"_"+langList[l].entry_id+"_"+langList[l].language_id+"_"+t;
				
				
				if ($.inArray(resultId, resultList) < 0 && $.inArray(resultId, results) < 0)
				{
					results.push(resultId);
				}
			}
		}
	}
	
	return results;
}

function personFind(query)
{
	var results = [];
	
	for (var e = 0; e < entries.length; e++)
	{
		var transactions = (typeof entries[e]['transactions'] != 'undefined') ? entries[e]['transactions'] : [];
		
		var found = transactionNameCompare(query, transactions);
		
		var languages = entries[e]['languages'];
		for (var l = 0; l < languages.length; l++)
		{
			var language = languages[l];
			var transactions = (typeof language['transactions'] != 'undefined') ? entries[e]['transactions'] : [];
			
			if (!found) found = transactionNameCompare(query, transactions);
			
			var tigs = language['terms'];
			for (var t = 0; t < tigs.length; t++)
			{
				var tig = tigs[t];
				var transactions = (typeof tig['transactions'] != 'undefined') ? entries[e]['transactions'] : [];
				
				if (!found) found = transactionNameCompare(query, transactions);
				
				var resultId = "I-"+tigs[t].term.replace(/[^\w]/g,'~').toUpperCase()+"_"+e+"_"+l+"_"+t;
				
				if (found && $.inArray(resultId, results) < 0)
				{
					results.push(resultId);
				}
				
			}
		}

	}
	return results;
}

function transactionNameCompare(query, transactions)
{
	if (typeof transactions == 'undefined') return false;
	for (var i = 0; i < transactions.length; i++)
	{
		var re = new RegExp(query, 'i')
		if (transactions[i].person.search(re) > -1)
		{
			return true;
		}
	}
	return false;
}

//
function subjectFieldFind(query)
{
	var results = [];
	
	for (var e = 0; e < entries.length; e++)
	{
		var subjectField = (typeof entries[e]['subject_field'] != 'undefined') ? entries[e]['subject_field'] : "";
		
		var found = (subjectField != "" && subjectField.toUpperCase() == query.toUpperCase()) ? true : false;
		
		var languages = entries[e]['languages'];
		for (var l = 0; l < languages.length; l++)
		{
			var language = languages[l];	
			var tigs = language['terms'];
			for (var t = 0; t < tigs.length; t++)
			{
				var tig = tigs[t];
				
				var resultId = "I-"+tigs[t].term.replace(/[^\w]/g,'~').toUpperCase()+"_"+e+"_"+l+"_"+t;
				
				if (found && $.inArray(resultId, results) < 0)
				{
					results.push(resultId);
				}
				
			}
		}

	}
	return results;
}

function customerFind(query)
{
	var results = [];
	for (var t = 0; t < tigList.length; t++)
	{
		var tig = tigList[t]; 
		if (typeof tig.tig.customers == 'undefined') continue;
		for (var i = 0; i < tig.tig.customers.length; i++)
		{
			if ( query == '*' || (typeof tig.tig['customers'][i] != 'undefined' &&
				tig.tig['customers'][i].toUpperCase() == query.toUpperCase()))
			{
				var resultId = "I-"+tig.tig[t].term.replace(/[^\w]/g,'~').toUpperCase()+"_"+tig.entry_id+"_"+tig.language_id+"_"+tig.tig_id;
				
				if ($.inArray(resultId, resultList) < 0 && $.inArray(resultId, results) < 0)
				{
					results.push(resultId);
				}
			}
		}
	}
	
	return results;
}

</script>

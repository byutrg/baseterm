<script>
$(document).ready(init);
var entries;
var termbaseId;
var langCodeMaster;
var langCodeValueList = {};
var langList = [];
var tigList = [];
var termList = [];
var resultList = [];
var resultRows = [];
var activeModal = {};
var addNoteModal = {};
var newEntryModal = {};
var activeIndex = -1;
var changed = false;

$(document).ready($('#resultsTable').tablesorter());

function init()
{
	entries = $.parseJSON('{{entries|json_encode}}');
	termbaseId = '{{id|raw}}';
	
	for (var e = 0; e < entries.length; e++)
	{
		var languages = entries[e]['languages'];
		//create List structures
		for (var l = 0; l < languages.length; l++)
		{
			var language = languages[l];
			var tigs = languages[l]['terms'];
			langList.push({
					'entry_id':e, 
					'language_id':l,
					'language':language
				});
				
			for (var t = 0; t < tigs.length; t++)
			{
				var term = tigs[t]['term'];
				var tig = tigs[t];
				tigList.push({
					'entry_id':e,
					'language_id':l,
					'tig_id':t,
					'tig':tig
				});
				
				termList.push({
					'entry_id':e,
					'language_id':l,
					'tig_id':t,
					'term':term
				});
			}
		}
	}
	
	//add options to #languageCode select
	$.getJSON('lang_codes.json', function(data){
		langCodeLoader(data);;
	});
	
	//add options to #subjectField select
	subjectFieldLoader();
	
	//add options to #customer select
	customerLoader();
	
	//add options to #transacPerson select
	// transacPersonLoader();
	
	//non-unique jBox windows
	addNoteModal = new jBox('Modal', {
		height: 300,
		width: 300,
		closeOnClick: false,
	});
	
	//create new Entry modal
	newEntryModal = new jBox('Modal',{
		title: "New Entry:",
		position: {
			x: 50,
			y: 50
		},
		ajax: {
			url: 'entry/new', 
			data: {
				'termbaseId':termbaseId, 
				},
			reload: true
			},
		onClose: function(){
			
		}
	})

}

//***************************Click handlers***************************************
function addNewEntry()
{
	newEntryModal.open();
}



function searchForm()
{	
	var children = $('#searchQueries').children();
	
	resultList = [];
	$('.search_result').remove();
	
	var results = [];
	var paramProvided = false;
	for (var i = 0; i < children.length; i++)
	{
		if (children[i].value != '')
		{
			paramProvided = true;
			var resultArray = [];
			switch(children[i].id){
				case 'term':
					resultArray = termFind(children[i].value);
					break;
				case 'pos':
					//resultArray = posFind(children[i].value);
					resultArray = tigFind(children[i].value, 'pos');
					break;
				case 'languageCode':
					resultArray = langFind(children[i].value, 'code');
					break;
				// case 'transacPerson':
					// resultArray = personFind(children[i].value);
					// break;
				case 'subjectField':
					resultArray = subjectFieldFind(children[i].value);
					break;
				case 'approval':
					//resultArray = approvalFind(children[i].value);
					resultArray = tigFind(children[i].value, 'status');
					break;
				case 'customer':
					resultArray = customerFind(children[i].value);
					break;
				default:
					break;
			}
			if (resultArray.length > 0) results.push(resultArray);
		}
	}
	
	//narrow results with each additional query provided
	if (results.length > 0 || paramProvided)
	{
		if (results.length > 1)
		{
			var rLengthSmall = results[0].length;
			var narrow = 0;
			for (var i = 0; i < results.length; i++)
			{
				if (results[i].length < rLengthSmall)
				{
					rLengthSmall = results[i].length;
					narrow = i;
				}
			}
			
			for (var y = 0; y < results[narrow].length; y++)
			{
				var exists = true;
				for (var x = 0; x < results.length; x++)
				{
					if (narrow==x) continue;
					
					if ($.inArray(results[narrow][y], results[x]) < 0)
					{
						exists = false;
					}
				}
				if (exists == true)
				{
					resultList.push(results[narrow][y]);
				}
			}
		}
		else
		{
			resultList = results[0];
		}
		
		if (typeof resultList != 'undefined' && resultList.length > 0)
		{
			printResults();
			new jBox('Notice',{
				autoClose: 2000,
				content: 'Search complete!  Click a term to see more details',
				color: 'blue',
				attributes: {
					x: 'right',
					y: 'top'
				}
			})
		}
		else
		{
			var error = $('<tr></tr>');
			error.attr('class', 'noQueriesError search_result');
			error.text("No matching terms were found.");
			$('#resultsTable').append(error);	
		}
	}
	else
	{
		var error = $('<tr></tr>');
		error.attr('class', 'noQueriesError search_result');
		error.text("No search parameters were entered!");
		$('#resultsTable').append(error);	
	}
}







//******************************TEXT OUTPUTS******************************************

function noResultsError()
{
	var error = $('<tr></tr>');
	error.attr('class', 'noQueriesError search_result');
	error.text("No Search Results were found.");
	$('#resultsTable').append(error);
}

function printResults()
{
	if (typeof resultList == 'undefined') return false;
	for (var i = 0; i < resultList.length; i++) 
	{	
		var resultId = resultList[i];
		var idSplit = resultId.split('_');
		
		var e = idSplit[1]; 
		var l = idSplit[2];
		var t = idSplit[3];
		
				
		// <th>Term</th>
		// <th>Language</th>
		// <th>Synonym(s)</th>
		// <th>Translation(s)</th>
		// <th>Subject Field</th>
		// <th>Part of Speech</th>
		// <th>Approval Status</th>
		// <th>Customer(s)</th>
		// <th>Project</th>
		
		var resultRow = $('<tr></tr>');
		resultRow.attr('id', resultId);
		resultRow.attr('class', 'search_result');
		
		//term
		var resultTerm = $('<td></td>');
		resultTerm.attr('id', resultId+'_term');
		resultTerm.attr('class', 'result_term');
		resultTerm.text(entries[e]['languages'][l]['terms'][t]['term']);
		
		//Language
		//lang
		var code = entries[e]['languages'][l]['code'];
		var langName = "";
		var exists = false;
		for (var z = 0; z < langCodeMaster.length; z++)
		{
			if ($.inArray(code.toLowerCase(),langCodeMaster[z].codes) > -1)
			{
				exists = true;
				langName = langCodeMaster[z].name;
			}
		}
		if (!exists) langName = code;
		var resultLangCode = $('<td></td>');
		resultLangCode.text(langName);
		
		//Synonyms + Translations
		var resultSynonym = $('<td></td>');
		var resultTranslations = $('<td></td>');
		var synonymsExist = false;
		var translationsExist = false;
		for (var z = 0; z < entries[e]['languages'].length; z++)
		{		
			for (var x = 0; x < entries[e]['languages'][z].terms.length; x++)
			{
				if (z == l) //synonyms
				{
					if (entries[e]['languages'][z].terms.length - 1 > 0)
					{
						synonymsExist = true;
						if (x == t) continue;
						var synonymTerm = $('<p></p>');
						synonymTerm.text(entries[e]['languages'][z].terms[x].term);
						resultSynonym.append(synonymTerm);	
					}
				}
				else //translations
				{
					if (entries[e]['languages'][z].terms.length > 0)
					{
						translationsExist = true;
						var transTerm = $('<p></p>');
						transTerm.text(entries[e]['languages'][z].terms[x].term);
						resultTranslations.append(transTerm);	
					}
					
				}
				
			}
		}
		if (!synonymsExist) resultSynonym.text('---');
		if (!translationsExist) resultTranslations.text('---');
		
		//Subject Field
		var resultSubject = $('<td></td>');
		var subject = (typeof entries[e]['subject_field'] != 'undefined') ? entries[e]['subject_field'] : '---';
		resultSubject.text(subject);
		
		//pos
		var resultPos = $('<td></td>');
		var pos = (typeof entries[e]['languages'][l]['terms'][t]['pos'] != 'undefined') ? entries[e]['languages'][l]['terms'][t]['pos'] : '---';
		resultPos.text(pos);
		
		//approval status
		var resultStatus = $('<td></td>');
		var status = (typeof entries[e]['languages'][l]['terms'][t]['status'] != 'undefined') ? entries[e]['languages'][l]['terms'][t]['status'] : '---';
		switch(status)
		{
			case "preferredTerm-admn-sts":
				resultStatus.text("Preferred");
				break;
            case "admittedTerm-admn-sts":
				resultStatus.text("Admitted");
				break;
			case "deprecatedTerm-admn-sts":
				resultStatus.text("Deprecated");
				break;
			case "supersededTerm-admn-sts":
				resultStatus.text("Superseded");
				break;
			
		}
		
		//customers
		var resultCustomers = $('<td></td>');
		if (typeof entries[e]['languages'][l]['terms'][t]['customers'] != 'undefined')
		{
			var customers = [];
			for (var z = 0; z < entries[e]['languages'][l]['terms'][t]['customers'].length; z++)
			{
				var cust = entries[e]['languages'][l]['terms'][t]['customers'][z];
				if ($.inArray(cust, customers) < 0)
				{
					customers.push(cust);
					var customerP = $('<p></p>');
					customerP.text(cust);
					resultCustomers.append(customerP);
				}
			}
		}
		else
		{
			resultCustomers.text('---');
		}

		//projects
		var resultProjects = $('<td></td>');
		if (typeof entries[e]['languages'][l]['terms'][t]['projects'] != 'undefined')
		{
			var projects = [];
			for (var z = 0; z < entries[e]['languages'][l]['terms'][t]['projects'].length; z++)
			{
				var pro = entries[e]['languages'][l]['terms'][t]['projects'][z];
				if ($.inArray(pro, projects) < 0)
				{
					projects.push(pro);
					var projectP = $('<p></p>');
					projectP.text(pro);
					resultProjects.append(projectP);
				}
			}
		}
		else
		{
			resultProjects.text('---');
		}
		
		//// Transac
		// var resultTransacPersonEntry = $('<td></td>');
		// if (typeof entries[e]['transactions'] != 'undefined')
		// {
			// for (var x = 0; x < entries[e]['transactions'].length; x++)
			// {
				// var resultTransacPerson_item = $('<p></p>');
				// resultTransacPerson_item.text(entries[e]['transactions'][x].person);
				// resultTransacPersonEntry.append(resultTransacPerson_item);
			// }
		
		// }
		
		resultRow.append(resultTerm);
		resultRow.append(resultLangCode);
		resultRow.append(resultSynonym);
		resultRow.append(resultTranslations);
		resultRow.append(resultSubject);
		resultRow.append(resultPos);
		resultRow.append(resultStatus);
		resultRow.append(resultCustomers);
		resultRow.append(resultProjects);
		
		resultRows.push(resultRow);
		$('#resultTableBody').append(resultRow);

		
		// <th>Term</th>
		// <th>Language</th>
		// <th>Synonym(s)</th>
		// <th>Translation(s)</th>
		// <th>Subject Field</th>
		// <th>Part of Speech</th>
		// <th>Approval Status</th>
		// <th>Customer(s)</th>
		// <th>Project</th>
		
		var idSpan = $('<input>');
		idSpan.text(resultId);
		idSpan.attr('class', 'idList');
		idSpan.attr('type', 'hidden');
				
		
		var modal = new jBox('Modal', {
			width: 600,
			height: 400,
			id: resultId+'_modal_'+i,
			attach: $('#'+resultId+"_term"),
			title: entries[e]['languages'][l]['terms'][t]['term'],
			onOpen: function(){
				smallWindowConstruct(this);
				modalListener(this);
				new jBox('Notice',{
					autoClose: 15000,
					content: '<p>Click on a value to edit it!<p>'+
								'<p>Clicking the shaded area will close the details window.</p>'+
								'<p>You will be asked if you want to save any changes you made.</p>'+
								'<p>Clicking on this notice will close it.</p>',
					color: 'blue',
					position: {
						x: 'right',
						y: 'center'
					},
					offset: {
						x: -20
					}
				})
			},
			onClose: checkChanges,
		});
		
	}
	//append some content to the tbody
	$("#resultsTable").trigger('update');
}

function saveEntryChanges()
{
	alert('1');
	// alert(activeModal.content);
}

function checkChanges()
{
	if (changed)
	{	
		var idSplit = activeModal.id.split('_');
			
		var e = idSplit[1]; 
		var l = idSplit[2];
		var t = idSplit[3];
		
		var navObject = {
			'e': e,
			'l': l,
			't': t
		};
		
		var confirmModal = new jBox('Confirm', {
			closeOnClick: false,
			width: 200,
			height: 100,
			content: 'Changes have been made to an entry.  Would you like to keep these or discard them?',
			confirmButton: "Save Changes",
			confirm: function(){
				
				//alert(JSON.stringify(entries[e]));
				$.ajax({
					url: 'entry/update',
					data: {
						'termbaseId': termbaseId,
						'entry': entries[e],
					},
					success: function(result){
						
						new jBox('Notice', {
							theme: 'NoticeBorder',
							color: 'blue',
							content:'<p>Entry Updated</p>',
							attributes: { 
								x: 'right',
								y: 'bottom'
							}
						});
						
						searchForm();//refresh result list
						//sort Table
						//append some content to the tbody
					},
					error: function(result){
						new jBox('Notice', {
							theme: 'NoticeBorder',
							color: 'red',
							content:'<p>Update Error</p>'+
									'<p>Entry not updated!</p>',
							attributes: { 
								x: 'right',
								y: 'bottom'
							}
						});
					}
				});
			},
			cancel: function(){
				entries = $.parseJSON('{{entries|json_encode}}');
				new jBox('Notice', {
					theme: 'NoticeBorder',
					color: 'green',
					content:'<p>Changes ignored.</p>',
					attributes: { 
						x: 'right',
						y: 'bottom'
					}
				});
			},
		});
		confirmModal.open();
		changed = false;
	}
}

//windowContent Constructors
function smallWindowConstruct(modal)
{
	var idSplit = modal.id.split('_');
		
	var e = idSplit[1]; 
	var l = idSplit[2];
	var t = idSplit[3];
	
	var navObject = {
		'e': e,
		'l': l,
		't': t
	};
	modal.ajax({url: 'entry/view/small', data: {'termbaseId':termbaseId, 'nav': navObject}});
}

//large window constructor
function largeWindowConstruct()
{
	
}


//modalWindow listeners
function modalListener(modal)
{
	activeModal = modal;
	activeModal.setHeight(200);
	activeModal.setWidth(300);
	// $('.expandButton').text('More Details');
	// $('.expandButton').attr('onClick', 'expandModalButton_pressed()');
}

function expandModalButton_pressed()
{
	var idSplit = activeModal.id.split('_');
		
	var e = idSplit[1]; 
	var l = idSplit[2];
	var t = idSplit[3];
	
	var navObject = {
		'e': e,
		'l': l,
		't': t
	};
	activeModal.ajax({url: 'entry/view/large', data: {'termbaseId':termbaseId, 'nav': navObject}});
	activeModal.setHeight(400);
	activeModal.setWidth(600);
	// $('.expandButton').text('Fewer Details');
	// $('.expandButton').attr('onClick', 'shrinkModalButton_pressed()');
}

function shrinkModalButton_pressed()
{
	var idSplit = activeModal.id.split('_');
		
	var e = idSplit[1]; 
	var l = idSplit[2];
	var t = idSplit[3];
	
	var navObject = {
		'e': e,
		'l': l,
		't': t
	};
	activeModal.ajax({url: 'entry/view/small', data: {'termbaseId':termbaseId, 'nav': navObject}});
	activeModal.setHeight(200);
	activeModal.setWidth(300);
	// $('.expandButton').text('More Details');
	// $('.expandButton').attr('onClick', 'expandModalButton_pressed()');
}



//***********************SELECT element pre-loaders*****************************
function langCodeLoader(langCodeData)
{
	langCodeMaster = langCodeData;
	var langCodes = [];
	
	for (var e = 0; e < langCodeMaster.length; e++)
	{
		var codeKey = '';
		if (langCodeMaster[e].codes[0] != '')
		{
			codeKey = langCodeMaster[e].codes[0];
		}
		else{
			codeKey = langCodeMaster[e].codes[2];
		}
	
		langCodeValueList[codeKey] = langCodeMaster[e].name;
	}
	
	for (var i = 0; i < langList.length; i++)
	{
		var code = langList[i].language.code;
		
		if ($.inArray(code, langCodes) < 0)
		{
			langCodes.push(code);
		}
	}
	for (var i = 0; i < langCodes.length; i++)
	{
		var code = langCodes[i];
		var exists;
		for (var e = 0; e < langCodeMaster.length; e++)
		{
			if ($.inArray(code.toLowerCase(),langCodeMaster[e].codes) > -1)
			{
				exists = true;
				
				var opt = $('<option></option>');
				opt.attr('value', code);
				opt.text(langCodeMaster[e].name);
				$('#languageCode').append(opt);
				break;
			}
		}
		if (!exists)
		{
			var opt = $('<option></option>');
			opt.attr('value', code);
			opt.text(code);
			$('#languageCode').append(opt);
		}
	}
}

function transacPersonLoader()
{
	var personList = [];
	
	for (var e = 0; e < entries.length; e++)
	{
		var transactions = (typeof entries[e]['transactions'] != 'undefined') ? entries[e]['transactions'] : [];
		transacLooper(transactions, personList);
		
		var languages = entries[e]['languages'];
		for (var l = 0; l < languages.length; l++)
		{
			var language = languages[l];
			var transactions = (typeof language['transactions'] != 'undefined') ? entries[e]['transactions'] : [];
			transacLooper(transactions, personList);
			
			var tigs = language['terms'];
			for (var t = 0; t < tigs.length; t++)
			{
				var tig = tigs[t];
				var transactions = (typeof tig['transactions'] != 'undefined') ? entries[e]['transactions'] : [];
				transacLooper(transactions, personList);
			}
		}
	}
	for (var i = 0; i < personList.length; i++)
	{
		var person = personList[i];
		var opt = $('<option></option>');
		opt.attr('value', person);
		opt.text(person);
		$('#transacPerson').append(opt);
	}
}

function transacLooper(transactions, personList) //used by transacPersonLoader()
{
	if (typeof transactions == 'undefined') return;
	for (var i = 0; i < transactions.length; i++)
	{
		if($.inArray(transactions[i].person, personList) < 0)
		{	
			personList.push(transactions[i].person);
		}
	}
}

function subjectFieldLoader()
{
	var subjectFields = [];
	for (var i = 0; i < entries.length; i++)
	{
		var field = entries[i].subject_field;
		
		if (typeof field != 'undefined' && $.inArray(field, subjectFields) < 0)
		{
			subjectFields.push(field);
		}
	}
	for (var i = 0; i < subjectFields.length; i++)
	{
		var field = subjectFields[i];
		var opt = $('<option></option>');
		opt.attr('value', field);
		opt.text(field);
		$('#subjectField').append(opt);
	}
}

function customerLoader()
{
	var customers = [];
	for (var i = 0; i < tigList.length; i++)
	{
		var tigObject = tigList[i];
		var customerList = tigObject.tig.customers;
		if (typeof customerList == 'undefined' || customerList.length < 1) continue;
		for (var c = 0; c < customerList.length; c++)
		{
			var customer = customerList[c];
			if (typeof customer != 'undefined' && $.inArray(customer, customers) < 0)
			{
				customers.push(customer);
			}
		}
	}
	for (var i = 0; i < customers.length; i++)
	{
		var customer = customers[i];
		var opt = $('<option></option>');
		opt.attr('value', customer);
		opt.text(customer);
		$('#customer').append(opt);
	}
}




//*******************************Search Functions************************************
function termFind(query)
{
	var results = [];
	for (var t = 0; t < termList.length; t++)
	{
		var term = termList[t];
		
		var re = new RegExp(query, "i");
		
		if (typeof term.term != 'undefined' &&
			term.term.search(re) > -1)
		{
			var resultId = "I_"+term.entry_id+"_"+term.language_id+"_"+term.tig_id;
			
			if ($.inArray(resultId, resultList) < 0 && $.inArray(resultId, results) < 0)
			{
				results.push(resultId);
			}
		}
	}
	
	return results;
}

function tigFind(query, index)
{
	var results = [];
	for (var t = 0; t < tigList.length; t++)
	{
		var tig = tigList[t];
		
		if ( query == '*' || (typeof tig.tig[index] != 'undefined' &&
			tig.tig[index].toUpperCase() == query.toUpperCase()))
		{
			var resultId = "I_"+tig.entry_id+"_"+tig.language_id+"_"+tig.tig_id;
			
			if ($.inArray(resultId, resultList) < 0 && $.inArray(resultId, results) < 0)
			{
				results.push(resultId);
			}
		}
	}
	
	return results;
}

function langFind(query, index)
{
	var results = [];
	for (var l = 0; l < langList.length; l++)
	{
		var language = langList[l].language;
		if ( typeof language[index] != 'undefined' &&
			language[index].toUpperCase() == query.toUpperCase())
		{
			var terms = language.terms;
			
			for (var t = 0; t < terms.length; t++)
			{
				var resultId = "I_"+langList[l].entry_id+"_"+langList[l].language_id+"_"+t;
				
				
				if ($.inArray(resultId, resultList) < 0 && $.inArray(resultId, results) < 0)
				{
					results.push(resultId);
				}
			}
		}
	}
	
	return results;
}

function personFind(query)
{
	var results = [];
	
	for (var e = 0; e < entries.length; e++)
	{
		var transactions = (typeof entries[e]['transactions'] != 'undefined') ? entries[e]['transactions'] : [];
		
		var found = transactionNameCompare(query, transactions);
		
		var languages = entries[e]['languages'];
		for (var l = 0; l < languages.length; l++)
		{
			var language = languages[l];
			var transactions = (typeof language['transactions'] != 'undefined') ? entries[e]['transactions'] : [];
			
			if (!found) found = transactionNameCompare(query, transactions);
			
			var tigs = language['terms'];
			for (var t = 0; t < tigs.length; t++)
			{
				var tig = tigs[t];
				var transactions = (typeof tig['transactions'] != 'undefined') ? entries[e]['transactions'] : [];
				
				if (!found) found = transactionNameCompare(query, transactions);
				
				var resultId = "I_"+e+"_"+l+"_"+t;
				
				if (found && $.inArray(resultId, results) < 0)
				{
					results.push(resultId);
				}
				
			}
		}

	}
	return results;
}

function transactionNameCompare(query, transactions)
{
	if (typeof transactions == 'undefined') return false;
	for (var i = 0; i < transactions.length; i++)
	{
		var re = new RegExp(query, 'i')
		if (transactions[i].person.search(re) > -1)
		{
			return true;
		}
	}
	return false;
}

//
function subjectFieldFind(query)
{
	var results = [];
	
	for (var e = 0; e < entries.length; e++)
	{
		var subjectField = (typeof entries[e]['subject_field'] != 'undefined') ? entries[e]['subject_field'] : "";
		
		var found = (subjectField != "" && subjectField.toUpperCase() == query.toUpperCase()) ? true : false;
		
		var languages = entries[e]['languages'];
		for (var l = 0; l < languages.length; l++)
		{
			var language = languages[l];	
			var tigs = language['terms'];
			for (var t = 0; t < tigs.length; t++)
			{
				var tig = tigs[t];
				
				var resultId = "I_"+e+"_"+l+"_"+t;
				
				if (found && $.inArray(resultId, results) < 0)
				{
					results.push(resultId);
				}
				
			}
		}

	}
	return results;
}

function customerFind(query)
{
	var results = [];
	for (var t = 0; t < tigList.length; t++)
	{
		var tig = tigList[t]; 
		if (typeof tig.tig.customers == 'undefined') continue;
		for (var i = 0; i < tig.tig.customers.length; i++)
		{
			if ( query == '*' || (typeof tig.tig['customers'][i] != 'undefined' &&
				tig.tig['customers'][i].toUpperCase() == query.toUpperCase()))
			{
				var resultId = "I_"+tig.entry_id+"_"+tig.language_id+"_"+tig.tig_id;
				
				if ($.inArray(resultId, resultList) < 0 && $.inArray(resultId, results) < 0)
				{
					results.push(resultId);
				}
			}
		}
	}
	
	return results;
}



//******************************Modal JS*****************************
	var previousText;

	var input;

	//mini-window event handlers
	
	
	
	//Information pop-ups
	$('body').on('mouseover', '.result_term', function(){
		$('.result_term').jBox('Mouse', {
			content: 'Click to view entry!'
		});
	});
	$('body').on('mouseover', '.modalDivValue span', function(){
		$('.modalDivValue span').jBox('Mouse', {
			content: 'Click to edit this value!',
			closeOnClick: true
		});
	});
	$('body').on('mouseover', '.addNote', function(){
		$('.addNote').jBox('Mouse', {
			content: 'Add a new note!'
		});
	});
	
	
	//TEXT BOXES
	$('body').on('click', '.editText', function(){
		
		input = $('<input class="inputTextValue" type="text" />');
		input.attr('id', $(this).attr('id'));
		var currentText;
		
		var type = input.attr('id').split('_')[0];
		switch(type)
		{
			case 'subjectValue':
				//warn that Notes are kept at Entry level
				new jBox('Notice', {
					color: 'red',
					content: '<p>Subject fields apply to the entire entry. Changing the subject field will apply to all terms of an entry.</p>',
					position: {
						x: 'left',
						y: 'center'
					},
					offset: {
						x: 20
					}
				});
				
				if ($(this).text() != "---")
				{
					currentText = $(this).text();
				}
				else
				{
					currentText = "";
				}
				break;
			case 'noteValue':
				//warn that Notes are kept at Entry level
				new jBox('Notice', {
					color: 'red',
					content: '<p>Notes are kept at the entry level.  Any notes added will apply to all terms of an entry.</p>'+
							'<p>Leave an entry blank to delete it.</p>',
					position: {
						x: 'left',
						y: 'center'
					},
					offset: {
						x: 20
					}
				});
			
				if ($(this).text() != "Click here to add a note." && $(this).text() != "---")
				{
					currentText = $(this).text();
				}
				else
				{
					currentText = "";
				}
				break;
			case 'projectValue':
				if ($(this).text() != "Click here to add a project." && $(this).text() != "---")
				{
					currentText = $(this).text();
				}
				else
				{
					currentText = "";
				}
				break;
			default:
				if (
					$(this).text() != "---" &&
					$(this).text() != "Click here to add content." &&
					$(this).text() != "Click here to add a source."
					)
				{
					currentText = $(this).text();
				}
				else
				{
					currentText = "";
				}
				break;
		}
		previousText = currentText;
		$(this).replaceWith( input );
		input.attr('value', currentText);
		input.focus();
	});
	$('body').on('focusout', '.inputTextValue', function(){
			
			var input = $('<span class="editText"></span>');
			input.attr('id', $(this).attr('id'));
			var currentText;
			($(this).val() != "") ? currentText = $(this).val() : currentText = "---";
			$(this).replaceWith( input );
			
			
			if (currentText != previousText)
			{
				changed = true;
			
				var idSplit = activeModal.id.split('_');
		
				var e = idSplit[1]; 
				var l = idSplit[2];
				var t = idSplit[3];
			
				//update entries
				var type = input.attr('id').split('_')[0];
				
				switch (type)
				{
					case 'termValue':
						entries[e].languages[l].terms[t].term = currentText;
						break;
					case 'noteValue':
						input.attr('class', 'editText arrayFormat');
						var noteIndex;
						(typeof input.attr('id').split('_')[1] != 'undefined') ? noteIndex = input.attr('id').split('_')[1] : noteIndex = 'new';
						if (currentText == "---")
						{
							if (noteIndex != 'new') 
							{
								entries[e].notes.splice(noteIndex, 1);
							}
						}
						else
						{
							if (noteIndex == 'new')
							{
								if (typeof entries[e].notes != "undefined")
								{
									entries[e].notes.push(currentText);
								}
								else
								{
									entries[e].notes = [currentText];
								}
							}
							else
							{
								entries[e].notes[noteindex] = currentText;
							}
						}
						break;
					case 'subjectValue':
						entries[e].subject_field = currentText;
						break;
					case 'projectValue':
						input.attr('class', 'editText arrayFormat');
						var projectIndex;
						(typeof input.attr('id').split('_')[1] != 'undefined') ? projectIndex = input.attr('id').split('_')[1] : projectIndex = 'new';
						if (currentText == "---")
						{
							if (projectIndex != 'new') 
							{
								entries[e].languages[l].terms[t].projects.splice(projectIndex, 1);
							}
						}
						else
						{
							if (projectIndex == 'new')
							{
								if (typeof entries[e].languages[l].terms[t].projects != "undefined")
								{
									entries[e].languages[l].terms[t].projects.push(currentText);
								}
								else
								{
									entries[e].languages[l].terms[t].projects = [currentText];
								}
							}
							else
							{
								entries[e].languages[l].terms[t].projects[projectIndex] = currentText;
							}
						}
						break;
					case 'defValue':
						input.attr('class', 'editText arrayFormat');
						var projectIndex;
						(typeof input.attr('id').split('_')[1] != 'undefined') ? projectIndex = input.attr('id').split('_')[1] : projectIndex = 'new';
						if ($(this).attr('id').split('_')[2] == 'content')
						{
							if (currentText != '---')
							{
								var sourceVal = ($('#defValue_'+projectIndex+'_source').text() != '---' && $('#defValue_'+projectIndex+'_source').text() != 'Click here to add a source.') ? $('#defValue_'+projectIndex+'_source').text() : '';
								
								var defObj = {'content': currentText};
								if (sourceVal != '') defObj['source'] = sourceVal;
								
								if (typeof entries[e].definitions != 'undefined')
								{
									if (projectIndex == 'new')
									{
										projectIndex = entries[e].definitions.length;
										entries[e].definitions.push(defObj);
										input.attr('id', 'defValue_'+projectIndex+'_content');
										$('#defValue_new_source').attr('id', 'defValue_'+projectIndex+'_source');
									}
									else
									{
										entries[e].definitions[projectIndex].content = currentText;
										entries[e].definitions[projectIndex].source = sourceVal;
									}
								}
								else
								{
									entries[e]['definitions'] = [defObj];
									input.attr('id', 'defValue_0_content');
									$('#defValue_new_source').attr('id', 'defValue_0_source');
								}
							}
							else
							{
								if (entries[e].definitions != 'undefined')
								{
									if (projectIndex != 'new')
									{
										entries[e].definitions.splice(projectIndex, 1);
									}
								}
							}
						}
						else if ($(this).attr('id').split('_')[2] == 'source')
						{
							if (currentText != '---')
							{
								
								if (typeof entries[e].definitions != 'undefined')
								{
									if (projectIndex == 'new')
									{
										if($('#defValue_new_source').text() == '---' || $('#defValue_new_source').text() == 'Click here to add content.')
										{
											new jBox('Notice', {
												content: 'Definition will not be saved without content',
												position: {
													x: 'left',
													y: 'center',
												},
												offset: {
													x: 5
												}
											});
										}
									}
									else
									{
										if (typeof entries[e].definitions[projectIndex] != 'undefined')
										{
											entries[e].definitions[projectIndex].source = currentText;
										}
									}
								}
								else
								{
									new jBox('Notice', {
												content: 'Definition will not be saved without content',
												position: {
													x: 'left',
													y: 'center',
												},
												offset: {
													x: 5
												}
											});
								}
							}
							else
							{
								if (entries[e].definitions != 'undefined')
								{
									if (projectIndex != 'new')
									{
										delete entries[e].definitions[projectIndex].source;
									}
								}
							}
						}
				}
			}
			input.text(currentText);
			
		});
	
	//SELECTION MENUS
	$('body').on('click', '.editList', function(){
		
		input = $('<select class="inputListValue"></select>');
		input.attr('id',$(this).attr('id'));
		var type = $(this).attr('id').split('_')[0];
		previousText = $(this).text();
		switch(type)
		{
			case 'statusValue':
				var optPref = $('<option value="preferredTerm-admn-sts">Preferred</option>');
				var optAdm = $("<option value='admittedTerm-admn-sts'>Admitted</option>");
				var optDep = $("<option value='deprecatedTerm-admn-sts'>Deprecated</option>");
				var optSup = $("<option value='supersededTerm-admn-sts'>Superseded</option>");
				
				switch($(this).text())
				{
					case 'Preferred':
						optPref.attr('selected', 'true');
						break;
					case 'Admitted':
						optAdm.attr('selected','true');
						break;
					case 'Deprecated':
						optDep.attr('selected','true');
						break;
					case 'Superseded':
						optSup.attr('selected','true');
						break;
				}
				input.append(optPref);
				input.append(optAdm);
				input.append(optDep);
				input.append(optSup);
				
				$(this).replaceWith(input);
				break;
			case 'posValue':
				var optNoun = $("<option value='noun'>Noun</option>");
				var optVerb = $("<option value='verb'>Verb</option>");
				var optAdj = $("<option value='adjective'>Adjective</option>");
				var optAdv = $("<option value='adverb'>Adverb</option>");
				var optPropN = $("<option value='properNoun'>Proper Noun</option>");
				var optOther = $("<option value='other'>Other</option>");
				
				switch($(this).text())
				{
					case 'Noun':
						optNoun.attr('selected', 'true');
						break;
					case 'Verb':
						optVerb.attr('selected','true');
						break;
					case 'Adjective':
						optAdj.attr('selected','true');
						break;
					case 'Adverb':
						optAdv.attr('selected','true');
						break;
					case 'Proper Noun':
						optPropN.attr('selected','true');
						break;
					case 'Other':
						optOther.attr('selected','true');
						break;
				}
				input.append(optNoun);
				input.append(optVerb);
				input.append(optAdj);
				input.append(optAdv);
				input.append(optPropN);
				input.append(optOther);
				
				$(this).replaceWith(input);
				break;
			case 'genderValue':
				var optMasc = $("<option value='masculine'>Masculine</option>");
				var optFem = $("<option value='feminine'>Feminine</option>");
				var optNeut = $("<option value='neuter'>Neuter</option>");
				var optOther = $("<option value='other'>Other</option>");
				var optNone = $("<option value='none'>None</option>");
				
				switch($(this).text())
				{
					case 'Masculine':
						optMasc.attr('selected', 'true');
						break;
					case 'Feminine':
						optFem.attr('selected','true');
						break;
					case 'Neuter':
						optNeut.attr('selected','true');
						break;
					case 'Other':
						optOther.attr('selected','true');
						break;
					case 'None':
						optNone.attr('selected','true');
						break;
				}
				input.append(optMasc);
				input.append(optFem);
				input.append(optNeut);
				input.append(optOther);
				input.append(optNone);
				
				$(this).replaceWith(input);
				break;
		}
	
		input.focus();
	});
	$('body').on('focusout', '.inputListValue', function(){
			
			var input = $('<span class="editList"></span>');
			input.attr('id',$(this).attr('id'));
			var currentText;
			
			switch($(this).val())
			{
				case "preferredTerm-admn-sts":
					currentText = "Preferred";
					break;
				case "admittedTerm-admn-sts":
					currentText = "Admitted";
					break;
				case "deprecatedTerm-admn-sts":
					currentText = "Deprecated";
					break;
				case "supersededTerm-admn-sts":
					currentText = "Superseded";
					break;
				case 'noun':
					currentText = "Noun";
					break;
				case 'verb':
					currentText = "Verb";
					break;
				case 'adjective':
					currentText = "Adjective";
					break;
				case 'adverb':
					currentText = "Adverb";
					break;
				case 'properNoun':
					currentText = "Proper Noun";
					break;
				case 'masculine':
					currentText = "Masculine";
					break;
				case 'feminine':
					currentText = "Feminine";
					break;
				case 'neuter':
					currentText = "Neuter";
					break;
				case 'other':
					currentText = "Other";
					break;
				case 'none':
					currentText = "None";
			}
			
			$(this).replaceWith( input );
			input.text(currentText);
			
			if (currentText != previousText)
			{
				changed = true;
			
				var idSplit = activeModal.id.split('_');
		
				var e = idSplit[1]; 
				var l = idSplit[2];
				var t = idSplit[3];
			
				//update entries
				var type = input.attr('id').split('_')[0];
				switch (type)
				{
					case 'statusValue':
						entries[e].languages[l].terms[t].status = $(this).val();
						break;
					case 'posValue':
						entries[e].languages[l].terms[t].pos = $(this).val();
						break;
					case 'genderValue':
						if ($(this).val() != 'none')
						{
							entries[e].languages[l].terms[t].gender = $(this).val();
						}
						else
						{
							if (typeof entries[e].languages[l].terms[t].gender != 'undefined')
							{
								delete entries[e].languages[l].terms[t]['gender'];
							}
						}
						break;
				}
			}
			
		});
</script>
{#/*
 *  This file is part of BaseTerm.
 *  
 *  BaseTerm is an open-source and free to use terminology management system built with the primary goal of natively supporting the most popular TBX dialect for exchange, TBX-Basic
 *  
 *  Copyright Â© (2015-2017) BYU TRG & LTAC Global & CRITI
 *  
 *  See the LICENSE file that accompanied this source code for the full license
 *  information
 */#}
<script>

$(document).ready(init);
var entries_list;
var persons;
var tigCount = 0;
var termbaseId;
var langCodeMaster;
var langCodeValueList = {};
var regionCodeValueList = {};
var subjectFields = [];
var langList = [];
var regionList =[];
var tigList = [];
var termList = [];
var resultList = [];
var resultRows = [];
var activeModal = {};
var pendingModal = {};
var clickToViewTip = {};
var clickToEditTip = {};
var clickToAddNoteTip = {};
var displayRefTargetTip = {};
var displayExtRefTargetTip = {};
var displayImgTargetTip = {};
var geoEditTip = {};
var addTermModal = {};
var saveConfirmModal = {};
var saveConfirmModalMini = {};
var regionCodeMaster = [];
var activeIndex = -1;
var displayIndex = 0;
var showTips = (localStorage['showTips'] == 'false') ? false : true || true;
var changed = false;
var editLevel = {'entry': false, 'lang': false, 'tig': false};
var addLevel = {'entry': false, 'lang': false, 'tig': false};
var activeIsSmall = true;

$(document).ready($('#resultsTable').tablesorter());

function init()
{
	entries_list = $.parseJSON('{{entries_list|json_encode}}');
	entryTermbaseLink = $.parseJSON('{{entry_termbase_link|json_encode}}');
	
	getLists();
	
	if (!showTips){$('#myonoffswitch').prop('checked', false);} 

	//$('#entry_count').text('This termbase has '+entries.length+' entries ('+tigCount+' terms).');
	
	//add options to #subjectField select
	subjectFieldLoader();
	
	//add options to #customer select
	//customerLoader();
	
	//add options to #transacPerson select
	// transacPersonLoader();
	
	//add options to #languageCode select
	$.getJSON('{{path("lang_codes_list")}}', function(data){
		langCodeLoader(data);
		searchForm(true);
	});
	
	//load region codes
	$.ajax({
		dataType: "json",
		url: '{{path("region_codes_list")}}',
		async: false,
		success: function(data){
			regionCodeLoader(data);
		}
	});
	//$.getJSON('{{path("region_codes_list")}}', function(data){
	//	regionCodeLoader(data);
	//});
}

//***************************Variable SET/GET*************************************
function constructDate()
{
	var today = new Date();
	var day = today.getDate();
	var month = today.getMonth()+1;
	var year = today.getFullYear();
	
	return year+'-'+month+'-'+day;
}
function getPendingModal()
{
	if (typeof pendingModal.open != 'undefined') pendingModal.open();
	pendingModal = {}; //clear pending
}

function getLists()
{
	langList = [];
	tigList = [];
	termList = [];
    
    if (null != entries)
    {
        for (var el = 0; el < entries_list.length; el++)
        {
            for (var e = 0; e < entries_list[el].length; e++)
            {
                if (typeof entries_list[el][e]['languages'] == 'undefined') continue;
                var languages = entries_list[el][e]['languages'];
                //create List structures
                for (var l = 0; l < languages.length; l++)
                {
                    var language = languages[l];
                    var tigs = languages[l]['terms'];
                    langList.push({
                            'el':el,
                            'entry_id':e, 
                            'language_id':l,
                            'language':language
                        });

                    for (var t = 0; t < tigs.length; t++)
                    {
                        tigCount++;
                        var term = tigs[t]['term'];
                        var tig = tigs[t];
                        tigList.push({
                            'el':el,
                            'entry_id':e,
                            'language_id':l,
                            'tig_id':t,
                            'tig':tig
                        });

                        termList.push({
                            'el':el,
                            'entry_id':e,
                            'language_id':l,
                            'tig_id':t,
                            'term':term
                        });
                    }
                }
            }
        }
    }
}

function getNavObject()
{
	var idSplit = activeModal.id.split('_');
	
	var el = idSplit[1];
	var e = idSplit[2]; 
	var l = idSplit[3];
	var t = idSplit[4];
	
	var navObject = {
		'el': el,
		'e': e,
		'l': l,
		't': t
	};
	
	return navObject;
}

function clearSearchQueries()
{
	$('#term').val('');
	$('#pos').val('');
	$('#languageCode').val('');
	$('#subjectField').val('');
	$('#approval').val('');
	$('#customer').val('');
	$('#transacPerson').val('');
	searchForm(true);
}

//***************************Click handlers***************************************

$('#term').keyup(function(event) {
	if (event.keyCode == 13) {
		$('#search_all_button').click();
		return false;
	 }
});

//on hover over a term
$('body').on('mouseover','.term_item',function(){
	if(typeof clickToViewTip.destroy != 'undefined') clickToViewTip.destroy();
	clickToViewTip = new jBox('Mouse', {
			attach: $(this),
			content: 'Click to view entry!',
			addClass: 'clickToViewTip'
		}).open();
});

//on click of a term
$('body').on('click','.term_item',function(){

	var resultId = $(this).attr('id');
		var idSplit = resultId.split('_');
		
		var el = idSplit[1];
		var e = idSplit[2]; 
		var l = idSplit[3];
		var t = idSplit[4];
		
	pendingModal = new jBox('Modal', {
		width: 600,
		height: 400,
		id: resultId+'_modal',
		attach: $('#'+resultId+"_term"),
		title: 'Term Information',
		overlay: true,
		onOpen: function(){
			smallWindowConstruct(this);
			modalListener(this);
		},
		onClose: function(){
			
			if (!changed) setTimeout(getPendingModal(),500);
		}
	});
	
	if(typeof activeModal.destroy == 'undefined')
	{
		pendingModal.open();
		pendingModal = {}; //clearpending
	}
	else
	{
		activeModal.close().destroy();
	}
});

function searchClick()
{
	if ($('#term').val().length > 1 || $('#term').val() == "*" || $('#term').val() == "")
	{
		$('#searchError').text('');
		searchForm(false);
	}
	else
	{
		$('#searchError').text('Term must have a length of at least 2 characters.');
	}
}

function nextResultsClick()
{
	displayIndex = (displayIndex + 50 < resultList.length - 1) ? displayIndex + 50 : displayIndex;
	
	printResults();
}

function prevResultsClick()
{
	displayIndex = (displayIndex - 50 >= 0) ? displayIndex - 50 : displayIndex = 0;

	printResults();
}

function toggleTips(toggleswitch)
{
	showTips = toggleswitch.checked;
	localStorage['showTips'] = showTips;
}

//******************************TEXT OUTPUTS******************************************

function noResultsError()
{
	var error = $('<tr></tr>');
	error.attr('class', 'noQueriesError search_result');
	error.text("No Search Results were found.");
	$('#resultsTable').append(error);
}

function printResults()
{
	if (typeof resultList == 'undefined') return false;
	
	resultList.sort();
	$('.search_result').remove();

	showCount = (displayIndex + 50 < resultList.length) ? 50 : resultList.length - displayIndex;
	$('#entry_count').text('Showing ' + showCount + ' of '+resultList.length+' result(s) from '+tigCount+' total terms.');
	for (var i = displayIndex; i < displayIndex + 50 && i < resultList.length; i++) 
	{	
		var resultId = resultList[i];
		var idSplit = resultId.split('_');
		
		var el = idSplit[1];
		var e = idSplit[2]; 
		var l = idSplit[3];
		var t = idSplit[4];
		
				
		// <th>Term</th>
		// <th>Language</th>
		// <th>Definition(s)</th>
		// <th>Synonym(s)</th>
		// <th>Translation(s)</th>
		// <th>Subject Field</th>
		// <th>Part of Speech</th>

		
		var resultRow = $('<tr></tr>');
		resultRow.attr('id', resultId);
		resultRow.attr('class', 'search_result');
		
		//term
		var resultTerm = $('<td></td>');
		resultTerm.attr('id', resultId+'_term');
		resultTerm.attr('class', 'result_term term_item');
		resultTerm.text(entries_list[el][e]['languages'][l]['terms'][t]['term']);
		
		//Language
		//lang
		var code = entries_list[el][e]['languages'][l]['code'];
		var langName = "";
		var exists = false;
		for (var z = 0; z < langCodeMaster.length; z++)
		{
			if ($.inArray(code.toLowerCase(),langCodeMaster[z].codes) > -1)
			{
				exists = true;
				langName = langCodeMaster[z].name;
			}
		}
		if (!exists) langName = code;
		var resultLangCode = $('<td></td>');
		if(typeof entries_list[el][e]['languages'][l]['terms'][t].geo != 'undefined')
		{
			region = regionCodeValueList[entries_list[el][e]['languages'][l]['terms'][t].geo];
			resultLangCode.text(langName+" --- "+region);
		}
		else
		{
			resultLangCode.text(langName);
		}
		
		//Definition(s)
		var resultDefs = $('<td></td>');
		var defExists = false;
		
		if (typeof entries_list[el][e].definitions != 'undefined')
		{
			defExists = true;
			for (var d = 0; d < entries_list[el][e].definitions.length; d++)
			{
				source = (typeof entries_list[el][e].definitions[d].source == 'undefined') ?
					'No source.' :
					entries_list[el][e].definitions[d].source;
					
				var defWrap = $('<a title="'+source+'" style="background-color:#FFFFFF;color:#000000;text-decoration:none"></a>')
				var def = $('<p>'+entries_list[el][e].definitions[d].content+'</>');
				defWrap.append(def);
				resultDefs.append(defWrap);
			}
		}	
		if (typeof entries_list[el][e].languages[l].definitions != 'undefined')
		{
			defExists = true;
			for (var d = 0; d < entries_list[el][e].languages[l].definitions.length; d++)
			{
				source = (typeof entries_list[el][e].definitions[d].source == 'undefined') ?
					'No source.' :
					entries_list[el][e].definitions[d].source;
				
				var defWrap = $('<a title="'+source+'" style="background-color:#FFFFFF;color:#000000;text-decoration:none"></a>')
				var def = $('<p>'+entries_list[el][e].languages[l].definitions[d].content+'</>');
				defWrap.append(def);
				resultDefs.append(defWrap);
			}
		}
		if (!defExists) resultDefs.text('---');
		
		//Synonyms + Translations
		var resultSynonym = $('<td></td>');
		var resultTranslations = $('<td></td>');
		var synonymsExist = false;
		var translationsExist = false;
		for (var z = 0; z < entries_list[el][e]['languages'].length; z++)
		{		
			for (var x = 0; x < entries_list[el][e]['languages'][z].terms.length; x++)
			{
				if (z == l) //synonyms
				{
					if (entries_list[el][e]['languages'][z].terms.length - 1 > 0)
					{
						synonymsExist = true;
						if (x == t) continue;
						var synonymTerm = $('<p></p>');
						synonymTerm.attr('id', 'I_'+el+'_'+e+'_'+z+'_'+x+'_term_'+l+'_'+t); //l and t are added to make these values unique
						synonymTerm.attr('class', 'term_item');
						
						if (typeof entries_list[el][e]['languages'][z].terms[x].geo == 'undefined')
						{
							synonymTerm.text(entries_list[el][e]['languages'][z].terms[x].term);
						}
						else
						{
							region = regionCodeValueList[entries_list[el][e]['languages'][z].terms[x].geo];
							synonymTerm.text(entries_list[el][e]['languages'][z].terms[x].term+" --- "+region);
						}
						resultSynonym.append(synonymTerm);	
					}
				}
				else //translations
				{
					if (entries_list[el][e]['languages'][z].terms.length > 0)
					{
						translationsExist = true;
						var transTerm = $('<p></p>');
						transTerm.attr('id', 'I_'+el+'_'+e+'_'+z+'_'+x+'_term_'+l+'_'+t);;
						transTerm.attr('class', 'term_item');;
						
						if (typeof entries_list[el][e]['languages'][z].terms[x].geo == 'undefined')
						{
							transTerm.text(entries_list[el][e]['languages'][z].terms[x].term+' ('+entries_list[el][e]['languages'][z].code+')');
						}
						else
						{
							region = regionCodeValueList[entries_list[el][e]['languages'][z].terms[x].geo];
							transTerm.text(entries_list[el][e]['languages'][z].terms[x].term+' ('+entries_list[el][e]['languages'][z].code+') --- '+region);
						}
						resultTranslations.append(transTerm);	
					}
					
				}
				
			}
		}
		if (!synonymsExist) resultSynonym.text('---');
		if (!translationsExist) resultTranslations.text('---');
		
		//Subject Field
		var resultSubject = $('<td></td>');
		var subject = (typeof entries_list[el][e]['subject_field'] != 'undefined') ? entries_list[el][e]['subject_field'] : '---';
		resultSubject.text(subject);
		
		//pos
		var resultPos = $('<td></td>');
		var pos = (typeof entries_list[el][e]['languages'][l]['terms'][t]['pos'] != 'undefined') ? entries_list[el][e]['languages'][l]['terms'][t]['pos'] : '---';
		resultPos.text(pos);
		
		//parent termbase
		var parentTermbase = $('<td></td>');
		{% if is_granted('ROLE_STAFF') %}
			var termbaseLink = $('<a></a>');
			termbaseLink.prop('href', "{{path('search_termbase')}}?id="+entryTermbaseLink[el]['id']+"&name="+entryTermbaseLink[el]['name'])
			termbaseLink.text(entryTermbaseLink[el]['name']);
			parentTermbase.append(termbaseLink);
		{% else %}
			parentTermbase.text(entryTermbaseLink[el]['name']);
		{% endif %}
		
		//approval status
		//var resultStatus = $('<td></td>');
		//var status = (typeof entries_list[el][e]['languages'][l]['terms'][t]['status'] != 'undefined') ? entries_list[el][e]['languages'][l]['terms'][t]['status'] : '---';
		//switch(status)
		//{
		//	case "preferredTerm-admn-sts":
		//		resultStatus.text("Preferred");
		//		break;
        //    case "admittedTerm-admn-sts":
		//		resultStatus.text("Admitted");
		//		break;
		//	case "deprecatedTerm-admn-sts":
		//		resultStatus.text("Deprecated");
		//		break;
		//	case "supersededTerm-admn-sts":
		//		resultStatus.text("Superseded");
		//		break;
			
		//}
		
		//customers
		//var resultCustomers = $('<td></td>');
		//if (typeof entries_list[el][e]['languages'][l]['terms'][t]['customers'] != 'undefined')
		//{
		//	var customers = [];
		//	for (var z = 0; z < entries_list[el][e]['languages'][l]['terms'][t]['customers'].length; z++)
		//	{
		//		var cust = entries_list[el][e]['languages'][l]['terms'][t]['customers'][z];
		//		if ($.inArray(cust, customers) < 0)
		//		{
		//			customers.push(cust);
		//			var customerP = $('<p></p>');
		//			customerP.text(cust);
		//			resultCustomers.append(customerP);
		//		}
		//	}
		//}
		//else
		//{
		//	resultCustomers.text('---');
		//}

		//projects
		//var resultProjects = $('<td></td>');
		//if (typeof entries_list[el][e]['languages'][l]['terms'][t]['projects'] != 'undefined')
		//{
		//	var projects = [];
		//	for (var z = 0; z < entries_list[el][e]['languages'][l]['terms'][t]['projects'].length; z++)
		//	{
		//		var pro = entries_list[el][e]['languages'][l]['terms'][t]['projects'][z];
		//		if ($.inArray(pro, projects) < 0)
		//		{
		//			projects.push(pro);
		//			var projectP = $('<p></p>');
		//			projectP.text(pro);
		//			resultProjects.append(projectP);
		//		}
		//	}
		//}
		//else
		//{
		//	resultProjects.text('---');
		//}
		
		//// Transac
		// var resultTransacPersonEntry = $('<td></td>');
		// if (typeof entries[e]['transactions'] != 'undefined')
		// {
			// for (var x = 0; x < entries[e]['transactions'].length; x++)
			// {
				// var resultTransacPerson_item = $('<p></p>');
				// resultTransacPerson_item.text(entries[e]['transactions'][x].person);
				// resultTransacPersonEntry.append(resultTransacPerson_item);
			// }
		
		// }
		
		resultRow.append(resultTerm);
		resultRow.append(resultLangCode);
		resultRow.append(resultDefs);
		resultRow.append(resultSynonym);
		resultRow.append(resultTranslations);
		resultRow.append(resultSubject);
		resultRow.append(resultPos);
		resultRow.append(parentTermbase);
		//resultRow.append(resultStatus);
		//resultRow.append(resultCustomers);
		//resultRow.append(resultProjects);
		
		resultRows.push(resultRow);
		$('#resultTableBody').append(resultRow);

		
		// <th>Term</th>  
		// <th>Language</th>
		// <th>Synonym(s)</th>
		// <th>Translation(s)</th>
		// <th>Subject Field</th>
		// <th>Part of Speech</th>
		// <th>Approval Status</th>
		// <th>Customer(s)</th>
		// <th>Project</th>
		
		var idSpan = $('<input>');
		idSpan.text(resultId);
		idSpan.attr('class', 'idList');
		idSpan.attr('type', 'hidden');
	}
	//append some content to the tbody
	$("#resultsTable").trigger('update');
}

//windowContent Constructors
function smallWindowConstruct(modal)
{
	var idSplit = modal.id.split('_');
		
	var el = idSplit[1];
	var e = idSplit[2]; 
	var l = idSplit[3];
	var t = idSplit[4];
	
	var navObject = {
		'el': el,
		'e': e,
		'l': l,
		't': t
	};
	modal.ajax({url: "{{path('jbox_small')}}", method: 'POST', data: {'entries':JSON.stringify(entries_list[el]), 'termbaseId':termbaseId, 'nav': navObject, 'search_all': 'true'}});
	
	activeIsSmall = true;
}

//large window constructor
function largeWindowConstruct()
{ 
	
}


//*************************modalWindow listeners*****************************************
function modalListener(modal)
{
	activeModal = modal;
	activeModal.setHeight(200);
	activeModal.setWidth(400);
	// $('.expandButton').text('More Details');
	// $('.expandButton').attr('onClick', 'expandModalButton_pressed()');
}

function expandModalButton_pressed()
{
	navObject = getNavObject();
	el = navObject.el;
	e = navObject.e;
	l = navObject.l;
	t = navObject.t;
		
	activeModal.ajax({url: "{{path('jbox_large')}}", method: 'POST', data: {'entries':JSON.stringify(entries_list[el]), 'termbaseId':termbaseId, 'nav': navObject, 'no_edit': 'true', 'search_all': 'true'}});
	activeModal.setHeight(400);
	activeModal.setWidth(600);
	
	activeIsSmall = false;
	// $('.expandButton').text('Fewer Details');
	// $('.expandButton').attr('onClick', 'shrinkModalButton_pressed()');
}

function shrinkModalButton_pressed()
{
	navObject = getNavObject();
	el = navObject.el;
	e = navObject.e;
	l = navObject.l;
	t = navObject.t;
	
	activeModal.ajax({url: "{{path('jbox_small')}}", method: 'POST', data: {'entries':JSON.stringify(entries_list[el]), 'termbaseId':termbaseId, 'nav': navObject, 'search_all': 'true'}});
	activeModal.setHeight(200);
	activeModal.setWidth(400);
	
	activeIsSmall = true;
	// $('.expandButton').text('More Details');
	// $('.expandButton').attr('onClick', 'expandModalButton_pressed()');
}



//***********************SELECT element pre-loaders*****************************
function langCodeLoader(langCodeData)
{
	langCodeMaster = langCodeData;
	var langCodes = [];
	
	for (var e = 0; e < langCodeMaster.length; e++)
	{
		var codeKey = '';
		if (langCodeMaster[e].codes[0] != '')
		{
			codeKey = langCodeMaster[e].codes[0];
		}
		else{
			codeKey = langCodeMaster[e].codes[2];
		}
	
		langCodeValueList[codeKey] = langCodeMaster[e].name;
	}
	
	for (var i = 0; i < langList.length; i++)
	{
		var code = langList[i].language.code;
		
		if ($.inArray(code, langCodes) < 0)
		{
			langCodes.push(code);
		}
	}
	for (var i = 0; i < langCodes.length; i++)
	{
		var code = langCodes[i];
		var exists;
		for (var e = 0; e < langCodeMaster.length; e++)
		{
			if ($.inArray(code.toLowerCase(),langCodeMaster[e].codes) > -1)
			{
				exists = true;
				
				var opt = $('<option></option>');
				opt.attr('value', code);
				opt.text(langCodeMaster[e].name);
				$('#languageCode').append(opt);
				break;
			}
		}
		if (!exists)
		{
			var opt = $('<option></option>');
			opt.attr('value', code);
			opt.text(code);
			$('#languageCode').append(opt);
		}
	}
}

function regionCodeLoader(regionCodeData)
{
	regionCodeMaster = regionCodeData;
	for (var e = 0; e < regionCodeMaster.length; e++)
	{
		var codeKey = regionCodeMaster[e].code;
		regionCodeValueList[codeKey] = regionCodeMaster[e].regionName;
	}
}

function transacPersonLoader()
{
	var personList = [];
	
	for (var el = 0; el < entries_list.length; el++)
	{
		for (var e = 0; e < entries_list[el].length; e++)
		{
			var transactions = (typeof entries_list[el][e]['transactions'] != 'undefined') ? entries_list[el][e]['transactions'] : [];
			transacLooper(transactions, personList);
			
			if (typeof entries_list[el][e]['languages'] == 'undefined') continue;
			var languages = entries_list[el][e]['languages'];
			for (var l = 0; l < languages.length; l++)
			{
				var language = languages[l];
				var transactions = (typeof language['transactions'] != 'undefined') ? entries_list[el][e]['transactions'] : [];
				transacLooper(transactions, personList);
				
				var tigs = language['terms'];
				for (var t = 0; t < tigs.length; t++)
				{
					var tig = tigs[t];
					var transactions = (typeof tig['transactions'] != 'undefined') ? entries_list[el][e]['transactions'] : [];
					transacLooper(transactions, personList);
				}
			}
		}
	}
	
	for (var i = 0; i < personList.length; i++)
	{
		var person = personList[i];
		var opt = $('<option></option>');
		opt.attr('value', person);
		opt.text(person);
		$('#transacPerson').append(opt);
	}
}

function transacLooper(transactions, personList) //used by transacPersonLoader()
{
	if (typeof transactions == 'undefined') return;
	for (var i = 0; i < transactions.length; i++)
	{
		if($.inArray(transactions[i].person, personList) < 0)
		{	
			personList.push(transactions[i].person);
		}
	}
}

function subjectFieldLoader()
{
    if (null != entries_list)
    {
        for (var el = 0; el < entries_list.length; el++)
        {
            for (var i = 0; i < entries_list[el].length; i++)
            {
                var field = entries_list[el][i].subject_field;

                if (typeof field != 'undefined' && $.inArray(field, subjectFields) == -1)
                {
                    subjectFields.push(field);
                }
            }
        }
    }
    
    if (null != subjectFields)
    {
        for (var i = 0; i < subjectFields.length; i++)
        {
            var field = subjectFields[i];
            var opt = $('<option></option>');
            opt.attr('value', field);
            opt.text(field);
            $('#subjectField').append(opt);
        }
    }
}

function customerLoader()
{
	var customers = [];
	for (var i = 0; i < tigList.length; i++)
	{
		var tigObject = tigList[i];
		var customerList = tigObject.tig.customers;
		if (typeof customerList == 'undefined' || customerList.length < 1) continue;
		for (var c = 0; c < customerList.length; c++)
		{
			var customer = customerList[c];
			if (typeof customer != 'undefined' && $.inArray(customer, customers) < 0)
			{
				customers.push(customer);
			}
		}
	}
	for (var i = 0; i < customers.length; i++)
	{
		var customer = customers[i];
		var opt = $('<option></option>');
		opt.attr('value', customer);
		opt.text(customer);
		$('#customer').append(opt);
	}
}




//*******************************Search Functions************************************
function searchForm(searchAll)
{	
	$('.search_result').remove();

	var children = $('#searchQueries').children();
	displayIndex = 0; //reset displayIndex
	resultList = [];
	
	var results = [];
	var paramProvided = false;
	for (var i = 0; i < children.length; i++)
	{
		if (children[i].value != '' || searchAll || children[i].id == 'term')
		{
			paramProvided = true;
			var resultArray = [];
			switch(children[i].id){
				case 'term':
					query = (searchAll) ? '*' : children[i].value;
					resultArray = termFind(query);
					break;
				case 'pos':
					//resultArray = posFind(children[i].value);
					resultArray = tigFind(children[i].value, 'pos');
					break;
				case 'languageCode':
					resultArray = langFind(children[i].value, 'code');
					break;
				// case 'transacPerson':
					// resultArray = personFind(children[i].value);
					// break;
				case 'subjectField':
					resultArray = subjectFieldFind(children[i].value);
					break;
				//case 'approval':
				//	//resultArray = approvalFind(children[i].value);
				//	resultArray = tigFind(children[i].value, 'status');
				//	break;
				//case 'customer':
				//	resultArray = customerFind(children[i].value);
				//	break;
				default:
					break;
			}
			if (resultArray.length > 0) results.push(resultArray);
		}
	}
	
	//narrow results with each additional query provided
	if (results.length > 0 || paramProvided)
	{
		if (results.length > 1)
		{
			var rLengthSmall = results[0].length;
			var narrow = 0;
			for (var i = 0; i < results.length; i++)
			{
				if (results[i].length < rLengthSmall)
				{
					rLengthSmall = results[i].length;
					narrow = i;
				}
			}
			
			for (var y = 0; y < results[narrow].length; y++)
			{
				var exists = true;
				for (var x = 0; x < results.length; x++)
				{
					if (narrow==x) continue;
					
					if ($.inArray(results[narrow][y], results[x]) < 0)
					{
						exists = false;
					}
				}
				if (exists == true)
				{
					resultList.push(results[narrow][y]);
				}
			}
		}
		else
		{
			resultList = results[0];
		}
		
		if (typeof resultList != 'undefined' && resultList.length > 0)
		{
			printResults();
			
			if (showTips)
			{
				new jBox('Notice',{
					autoClose: 2000,
					content: 'Search complete!  Click a term to see more details',
					color: 'blue',
					attributes: {
						x: 'right',
						y: 'top'
					}
				});
			}
		}
		else
		{
			var error = $('<tr></tr>');
			error.attr('class', 'noQueriesError search_result');
			error.text("No matching terms were found.");
			$('#resultsTable').append(error);	
		}
	}
	else
	{
		var error = $('<tr></tr>');
		error.attr('class', 'noQueriesError search_result');
		error.text("No search parameters were entered!");
		$('#resultsTable').append(error);	
	}
}

function termFind(query)
{
	var results = [];
	for (var t = 0; t < termList.length; t++)
	{
		var term = termList[t];
		
		var re = (query != '*') ? new RegExp(query, "i") : new RegExp('.', "i");
		
		if (typeof term.term != 'undefined' &&
			term.term.search(re) > -1)
		{
			var resultId = "I-"+term.term.replace(/[^\w]/g,'~').toUpperCase()+"_"+term.el+"_"+term.entry_id+"_"+term.language_id+"_"+term.tig_id;
			
			if ($.inArray(resultId, resultList) < 0 && $.inArray(resultId, results) < 0)
			{
				results.push(resultId);
			}
		}
	}
	
	return results;
}

function tigFind(query, index)
{
	var results = [];
	for (var t = 0; t < tigList.length; t++)
	{
		var tig = tigList[t];
		
		if ( query == '*' || (typeof tig.tig[index] != 'undefined' &&
			tig.tig[index].toUpperCase() == query.toUpperCase()))
		{
			var resultId = "I-"+tig.tig.term.replace(/[^\w]/g,'~').toUpperCase()+"_"+tig.el+"_"+tig.entry_id+"_"+tig.language_id+"_"+tig.tig_id;
			
			if ($.inArray(resultId, resultList) < 0 && $.inArray(resultId, results) < 0)
			{
				results.push(resultId);
			}
		}
	}
	
	return results;
}

function langFind(query, index)
{
	var results = [];
	for (var l = 0; l < langList.length; l++)
	{
		var language = langList[l].language;
		if ( typeof language[index] != 'undefined' &&
			language[index].toUpperCase() == query.toUpperCase())
		{
			var terms = language.terms;
			
			for (var t = 0; t < terms.length; t++)
			{
				var resultId = "I-"+terms[t].term.replace(/[^\w]/g,'~').toUpperCase()+"_"+langList[l].el+"_"+langList[l].entry_id+"_"+langList[l].language_id+"_"+t;
				
				
				if ($.inArray(resultId, resultList) < 0 && $.inArray(resultId, results) < 0)
				{
					results.push(resultId);
				}
			}
		}
	}
	
	return results;
}

function personFind(query)
{
	var results = [];
	
	for (var el = 0; el < entries_list.length; el++)
	{
		for (var e = 0; e < entries_list[el].length; e++)
		{
			var transactions = (typeof entries_list[el][e]['transactions'] != 'undefined') ? entries_list[el][e]['transactions'] : [];
			
			var found = transactionNameCompare(query, transactions);
			if (typeof entries_list[el][e]['languages'] == 'undefined') continue;
			var languages = entries_list[el][e]['languages'];
			for (var l = 0; l < languages.length; l++)
			{
				var language = languages[l];
				var transactions = (typeof language['transactions'] != 'undefined') ? entries_list[el][e]['transactions'] : [];
				
				if (!found) found = transactionNameCompare(query, transactions);
				
				var tigs = language['terms'];
				for (var t = 0; t < tigs.length; t++)
				{
					var tig = tigs[t];
					var transactions = (typeof tig['transactions'] != 'undefined') ? entries_list[el][e]['transactions'] : [];
					
					if (!found) found = transactionNameCompare(query, transactions);
					
					var resultId = "I-"+tigs[t].term.replace(/[^\w]/g,'~').toUpperCase()+"_"+el+"_"+e+"_"+l+"_"+t;
					
					if (found && $.inArray(resultId, results) < 0)
					{
						results.push(resultId);
					}
					
				}
			}

		}
	}
	return results;
}

function transactionNameCompare(query, transactions)
{
	if (typeof transactions == 'undefined') return false;
	for (var i = 0; i < transactions.length; i++)
	{
		var re = new RegExp(query, 'i')
		if (transactions[i].person.search(re) > -1)
		{
			return true;
		}
	}
	return false;
}

//
function subjectFieldFind(query)
{
	var results = [];
	
    if (null != entries_list)
    {
        for (var el = 0; el < entries_list.length; el++)
        {
            for (var e = 0; e < entries_list[el].length; e++)
            {
                var subjectField = (typeof entries_list[el][e]['subject_field'] != 'undefined') ? entries_list[el][e]['subject_field'] : "";

                var found = (subjectField != "" && subjectField.toUpperCase() == query.toUpperCase()) ? true : false;
                if (typeof entries_list[el][e]['languages'] == 'undefined') continue;
                var languages = entries_list[el][e]['languages'];
                for (var l = 0; l < languages.length; l++)
                {
                    var language = languages[l];	
                    var tigs = language['terms'];
                    for (var t = 0; t < tigs.length; t++)
                    {
                        var tig = tigs[t];

                        var resultId = "I-"+tigs[t].term.replace(/[^\w]/g,'~').toUpperCase()+"_"+el+"_"+e+"_"+l+"_"+t;

                        if (found && $.inArray(resultId, results) < 0)
                        {
                            results.push(resultId);
                        }

                    }
                }

            }
        }
    }
	
	return results;
}

function customerFind(query)
{
	var results = [];
	for (var t = 0; t < tigList.length; t++)
	{
		var tig = tigList[t]; 
		if (typeof tig.tig.customers == 'undefined') continue;
		for (var i = 0; i < tig.tig.customers.length; i++)
		{
			if ( query == '*' || (typeof tig.tig['customers'][i] != 'undefined' &&
				tig.tig['customers'][i].toUpperCase() == query.toUpperCase()))
			{
				var resultId = "I-"+tig.tig[t].term.replace(/[^\w]/g,'~').toUpperCase()+"_"+tig.el+"_"+tig.entry_id+"_"+tig.language_id+"_"+tig.tig_id;
				
				if ($.inArray(resultId, resultList) < 0 && $.inArray(resultId, results) < 0)
				{
					results.push(resultId);
				}
			}
		}
	}
	
	return results;
}

</script>